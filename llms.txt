This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.cursor/
  rules/
    batch-processing-architecture.mdc
    pdf-rendering-pipeline.mdc
    scaling-algorithms.mdc
.giga/
  specifications.json
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
  workflows/
    build.yml
    release.yml
  FUNDING.yml
.specstory/
  .gitignore
docs/
  API.md
  EXAMPLES.md
  USAGE.md
homebrew/
  pdf22png.rb
scripts/
  install.sh
  uninstall.sh
Sources/
  TestFile.swift
src/
  errors.h
  pdf22png.h
  pdf22png.m
  utils.h
  utils.m
Tests/
  pdf22pngTests/
    pdf22pngTests.swift
  test_runner.m
.cursorrules
.editorconfig
.gitattributes
.gitignore
AGENTS.md
CHANGELOG.md
CLAUDE.md
CMakeLists.txt
LICENSE
Makefile
Package.swift
PROGRESS.md
README.html
README.md
release.sh
TODO.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Tests/test_runner.m">
#import <Foundation/Foundation.h>
#import "../src/utils.h"
#import "../src/pdf22png.h"

// Simple test framework macros
#define TEST_ASSERT(condition, message) \
    if (!(condition)) { \
        NSLog(@"FAIL: %s - %@", __FUNCTION__, message); \
        return NO; \
    }

#define TEST_ASSERT_EQUAL(actual, expected, message) \
    if ((actual) != (expected)) { \
        NSLog(@"FAIL: %s - %@. Expected: %@, Actual: %@", __FUNCTION__, message, @(expected), @(actual)); \
        return NO; \
    }

#define TEST_ASSERT_EQUAL_FLOAT(actual, expected, accuracy, message) \
    if (fabs((actual) - (expected)) > (accuracy)) { \
        NSLog(@"FAIL: %s - %@. Expected: %f, Actual: %f", __FUNCTION__, message, (expected), (actual)); \
        return NO; \
    }

// Test function declarations
BOOL testParseScaleSpec_percentage(void);
BOOL testParseScaleSpec_factor(void);
BOOL testParseScaleSpec_dpi(void);
BOOL testParseScaleSpec_dimensions(void);
BOOL testParseScaleSpec_invalid(void);
BOOL testParsePageRange(void);
BOOL testExtractTextFromPDFPage(void);
BOOL testFileExists(void);
BOOL testShouldOverwriteFile(void);

// Test implementations
BOOL testParseScaleSpec_percentage(void) {
    ScaleSpec scale;
    BOOL result = parseScaleSpec("150%", &scale);
    TEST_ASSERT(result, @"Parsing '150%' should succeed");
    TEST_ASSERT(scale.isPercentage, @"Scale should be percentage");
    TEST_ASSERT_EQUAL_FLOAT(scale.scaleFactor, 1.5, 0.001, @"Scale factor should be 1.5");
    TEST_ASSERT(!scale.isDPI, @"Scale should not be DPI");
    return YES;
}

BOOL testParseScaleSpec_factor(void) {
    ScaleSpec scale;
    BOOL result = parseScaleSpec("2.0", &scale);
    TEST_ASSERT(result, @"Parsing '2.0' should succeed");
    TEST_ASSERT(!scale.isPercentage, @"Scale should not be percentage");
    TEST_ASSERT_EQUAL_FLOAT(scale.scaleFactor, 2.0, 0.001, @"Scale factor should be 2.0");
    return YES;
}

BOOL testParseScaleSpec_dpi(void) {
    ScaleSpec scale;
    BOOL result = parseScaleSpec("300dpi", &scale);
    TEST_ASSERT(result, @"Parsing '300dpi' should succeed");
    TEST_ASSERT(scale.isDPI, @"Scale should be DPI");
    TEST_ASSERT_EQUAL_FLOAT(scale.dpi, 300.0, 0.001, @"DPI should be 300");
    return YES;
}

BOOL testParseScaleSpec_dimensions(void) {
    ScaleSpec scale;

    // Test height only (pattern: "heightx")
    BOOL result = parseScaleSpec("800x", &scale);
    TEST_ASSERT(result, @"Parsing '800x' should succeed");
    TEST_ASSERT(!scale.hasWidth, @"Should not have width");
    TEST_ASSERT(scale.hasHeight, @"Should have height");
    TEST_ASSERT_EQUAL_FLOAT(scale.maxHeight, 800.0, 0.001, @"Height should be 800");

    // Test width only (pattern: "xwidth")
    result = parseScaleSpec("x600", &scale);
    TEST_ASSERT(result, @"Parsing 'x600' should succeed");
    TEST_ASSERT(scale.hasWidth, @"Should have width");
    TEST_ASSERT(!scale.hasHeight, @"Should not have height");
    TEST_ASSERT_EQUAL_FLOAT(scale.maxWidth, 600.0, 0.001, @"Width should be 600");

    // Test both dimensions (pattern: "heightxwidth")
    result = parseScaleSpec("800x600", &scale);
    TEST_ASSERT(result, @"Parsing '800x600' should succeed");
    TEST_ASSERT(scale.hasWidth, @"Should have width");
    TEST_ASSERT(scale.hasHeight, @"Should have height");
    TEST_ASSERT_EQUAL_FLOAT(scale.maxHeight, 800.0, 0.001, @"Height should be 800");
    TEST_ASSERT_EQUAL_FLOAT(scale.maxWidth, 600.0, 0.001, @"Width should be 600");

    return YES;
}

BOOL testParseScaleSpec_invalid(void) {
    ScaleSpec scale;
    BOOL result = parseScaleSpec("invalid", &scale);
    TEST_ASSERT(!result, @"Parsing 'invalid' should fail");
    return YES;
}

BOOL testParsePageRange(void) {
    // Test simple single page
    NSArray *pages = parsePageRange(@"5", 10);
    TEST_ASSERT(pages != nil, @"parsePageRange should return array");
    TEST_ASSERT_EQUAL(pages.count, 1, @"Should have 1 page");
    TEST_ASSERT_EQUAL([pages[0] integerValue], 5, @"Page should be 5");

    // Test range
    pages = parsePageRange(@"1-3", 10);
    TEST_ASSERT(pages != nil, @"parsePageRange should return array");
    TEST_ASSERT_EQUAL(pages.count, 3, @"Should have 3 pages");
    TEST_ASSERT_EQUAL([pages[0] integerValue], 1, @"First page should be 1");
    TEST_ASSERT_EQUAL([pages[2] integerValue], 3, @"Last page should be 3");

    // Test comma separated
    pages = parsePageRange(@"1,3,5", 10);
    TEST_ASSERT(pages != nil, @"parsePageRange should return array");
    TEST_ASSERT_EQUAL(pages.count, 3, @"Should have 3 pages");
    TEST_ASSERT_EQUAL([pages[1] integerValue], 3, @"Second page should be 3");

    // Test complex
    pages = parsePageRange(@"1-3,5,7-9", 10);
    TEST_ASSERT(pages != nil, @"parsePageRange should return array");
    TEST_ASSERT_EQUAL(pages.count, 7, @"Should have 7 pages");

    return YES;
}

BOOL testExtractTextFromPDFPage(void) {
    // This test would require a real PDF, so we'll just verify the function exists
    NSString *result = extractTextFromPDFPage(nil);
    TEST_ASSERT(result == nil, @"Should return nil for nil page");
    return YES;
}

BOOL testFileExists(void) {
    // Test with non-existent file
    TEST_ASSERT(!fileExists(@"/path/that/does/not/exist"), @"Should return NO for non-existent file");

    // Test with a file that should exist (create a temp file)
    NSString *tempPath = [NSTemporaryDirectory() stringByAppendingPathComponent:@"test_file.txt"];
    [@"test" writeToFile:tempPath atomically:YES encoding:NSUTF8StringEncoding error:nil];
    TEST_ASSERT(fileExists(tempPath), @"Should return YES for existing temp file");
    [[NSFileManager defaultManager] removeItemAtPath:tempPath error:nil];

    return YES;
}

BOOL testShouldOverwriteFile(void) {
    // Test with non-existent file
    TEST_ASSERT(shouldOverwriteFile(@"/path/that/does/not/exist", NO), @"Should allow writing to non-existent file");
    TEST_ASSERT(shouldOverwriteFile(@"/path/that/does/not/exist", YES), @"Should allow writing to non-existent file");

    // Test with existing file in non-interactive mode
    NSString *tempPath = [NSTemporaryDirectory() stringByAppendingPathComponent:@"test_file2.txt"];
    [@"test" writeToFile:tempPath atomically:YES encoding:NSUTF8StringEncoding error:nil];
    TEST_ASSERT(!shouldOverwriteFile(tempPath, NO), @"Should not overwrite existing file in non-interactive mode");
    [[NSFileManager defaultManager] removeItemAtPath:tempPath error:nil];

    return YES;
}

// Main test runner
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSLog(@"Running pdf22png tests...");

        int passed = 0;
        int failed = 0;

        // Define test cases
        typedef BOOL (*TestFunction)(void);
        typedef struct {
            const char *name;
            TestFunction func;
        } TestCase;

        TestCase tests[] = {
            {"testParseScaleSpec_percentage", testParseScaleSpec_percentage},
            {"testParseScaleSpec_factor", testParseScaleSpec_factor},
            {"testParseScaleSpec_dpi", testParseScaleSpec_dpi},
            {"testParseScaleSpec_dimensions", testParseScaleSpec_dimensions},
            {"testParseScaleSpec_invalid", testParseScaleSpec_invalid},
            {"testParsePageRange", testParsePageRange},
            {"testExtractTextFromPDFPage", testExtractTextFromPDFPage},
            {"testFileExists", testFileExists},
            {"testShouldOverwriteFile", testShouldOverwriteFile},
        };

        int numTests = sizeof(tests) / sizeof(tests[0]);

        for (int i = 0; i < numTests; i++) {
            NSLog(@"Running %s...", tests[i].name);
            if (tests[i].func()) {
                NSLog(@"PASS: %s", tests[i].name);
                passed++;
            } else {
                failed++;
            }
        }

        NSLog(@"\n====================");
        NSLog(@"Test Results:");
        NSLog(@"  Passed: %d", passed);
        NSLog(@"  Failed: %d", failed);
        NSLog(@"  Total:  %d", passed + failed);
        NSLog(@"====================");

        return failed > 0 ? 1 : 0;
    }
}
</file>

<file path=".cursor/rules/batch-processing-architecture.mdc">
---
description: Documents the parallel processing architecture for PDF batch conversions using Grand Central Dispatch
globs: src/pdf22png.m,src/utils.m
alwaysApply: false
---


# batch-processing-architecture

## Parallel Processing Implementation

The batch processing architecture utilizes Grand Central Dispatch (GCD) to parallelize PDF page conversions:

### Core Components

1. **Batch Mode Dispatcher**
- Located in: `src/pdf22png.m`
- Manages concurrent page processing using GCD dispatch queues
- Handles thread synchronization for batch operations

2. **Worker Thread Management**
- Distributes page conversion tasks across multiple threads
- Maintains thread-safe status updates for conversion progress
- Implements autorelease pools for memory management during batch operations

3. **Output Coordination**
- Manages concurrent file writing for multiple page outputs
- Generates sequential output filenames based on page numbers
- Coordinates directory access for batch output files

### Batch Processing Workflow

1. **Initialization Phase**
```
Input PDF -> Page Count Analysis -> Worker Thread Pool Creation
```

2. **Distribution Phase**
```
Page Tasks -> GCD Dispatch Queue -> Worker Threads
```

3. **Synchronization Phase**
```
Worker Results -> Status Aggregation -> Final Output
```

### Critical Business Rules

1. **Page Processing Order**
- Pages can be processed in any order
- Output filenames maintain sequential numbering regardless of completion order
- Each page conversion is atomic and independent

2. **Resource Management**
- Worker threads utilize independent autorelease pools
- Memory allocation is managed per-page rather than globally
- PDF document remains open for shared access across threads

3. **Error Handling**
- Individual page failures don't halt batch processing
- Success/failure status tracked independently per page
- Aggregate status reported after all pages complete

4. **Output Coordination**
- Thread-safe file naming pattern generation
- Directory management for multiple output files
- Status tracking for completed conversions

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga batch-processing-architecture".
</file>

<file path=".cursor/rules/pdf-rendering-pipeline.mdc">
---
description: Documentation and analysis of PDF to PNG rendering pipeline including page extraction, CoreGraphics rendering, and image compression
globs: src/pdf22png.m,src/utils.m,src/*.h
alwaysApply: false
---


# pdf-rendering-pipeline 

## Core Rendering Components

### PDF Page Extraction (Importance: 95)
- Extracts individual PDF pages using Core Graphics
- Handles both single page and batch extraction modes
- Validates page numbers against document bounds
- Manages PDF document context and page references

### CoreGraphics Rendering (Importance: 90)
- Creates bitmap contexts sized to target dimensions
- Applies transformation matrix for scaling/positioning
- Renders PDF content through CoreGraphics drawing
- Handles different color spaces and bit depths
- Preserves vector quality during rasterization

### Transparency Handling (Importance: 85)
- Supports transparent backgrounds through alpha channel
- Creates RGBA bitmap contexts when transparency enabled
- Maintains PDF transparency groups during rendering
- Properly blends transparent elements

### PNG Compression Pipeline (Importance: 80)
- Configurable compression levels (0-9)
- Converts rendered bitmap to PNG format
- Handles color space conversion for output
- Manages PNG metadata and color profiles
- Supports both file and stream-based output

### Scale Management (Importance: 75)
- Calculates render dimensions from scale specifications
- Supports percentage, DPI, and fixed dimension scaling
- Maintains aspect ratios during scaling
- Applies appropriate transform matrices

File paths:
- src/pdf22png.m: Main rendering pipeline implementation
- src/utils.m: Scale calculation and image processing utilities
- src/pdf22png.h: Rendering pipeline interfaces

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga pdf-rendering-pipeline".
</file>

<file path=".cursor/rules/scaling-algorithms.mdc">
---
description: Specification for PDF scaling algorithms including resolution control, dimension fitting, and aspect ratio preservation
globs: src/utils.m,src/pdf22png.m,*.h
alwaysApply: false
---


# scaling-algorithms

## Core Scaling Logic

### Scale Specification Parsing (Importance: 95)
- Parses user scaling inputs into standardized formats:
  - Percentage scaling (e.g. "150%")
  - Resolution-based (DPI) scaling
  - Fixed dimension scaling (width/height)
  - Aspect ratio preservation
- Located in `src/utils.m:parseScaleSpec()`

### Scale Factor Calculation (Importance: 90)
- Converts parsed scale specs into concrete scaling factors:
  - Percentage to decimal multiplier
  - DPI to PDF-native 72 DPI ratio
  - Dimension constraints to appropriate scale values
- Maintains aspect ratio when scaling to fixed dimensions
- Located in `src/utils.m:calculateScaleFactor()`

### Resolution Control (Importance: 85)
- Handles DPI-based scaling calculations
- Default resolution: 144 DPI 
- Converts between DPI specifications and internal scale factors
- Located in `src/pdf22png.m`

### Dimension Fitting (Importance: 80)
- Supports multiple dimension specification formats:
  - Fixed width (800x)
  - Fixed height (x600) 
  - Bounded box (800x600)
- Calculates appropriate scaling while preserving aspect ratio
- Located in `src/utils.m`

### Aspect Ratio Preservation (Importance: 75)
- Maintains original PDF page proportions during scaling
- Implements "fit within" logic for bounded scaling
- Calculates maximum scale factor that satisfies both dimensions
- Located in `src/utils.m:calculateScaleFactor()`

## Scale Application

### Render Context Scaling (Importance: 70)
- Applies calculated scale factors to Core Graphics render context
- Handles coordinate system transformations
- Located in `src/utils.m:renderPDFPageToImage()`

### Multi-page Scaling (Importance: 65)
- Applies consistent scaling across all pages in batch mode
- Maintains uniform dimensions across output files
- Located in `src/pdf22png.m`

$END$

 If you're using this file in context, clearly say in italics in one small line that "Context added by Giga scaling-algorithms".
</file>

<file path=".giga/specifications.json">
[
  {
    "fileName": "main-overview.mdc",
    "description": "Complete system overview including core architecture, key components, and high-level data flow between PDF processing and PNG generation components"
  },
  {
    "fileName": "scaling-algorithms.mdc",
    "description": "Detailed documentation of the PDF scaling algorithms, including percentage scaling, DPI calculations, dimension fitting, and aspect ratio preservation logic"
  },
  {
    "fileName": "pdf-rendering-pipeline.mdc",
    "description": "Complete documentation of the PDF rendering pipeline, including page extraction, CoreGraphics rendering, transparency handling, and PNG compression workflow"
  },
  {
    "fileName": "batch-processing-architecture.mdc",
    "description": "Documentation of the parallel processing architecture for batch conversions, including Grand Central Dispatch implementation and thread management"
  }
]
</file>

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug Report
about: Create a report to help us improve pdf22png
title: "[BUG] Brief description of bug"
labels: bug
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Command-line used: `pdf22png ...`
2. Input PDF details (e.g., version, source, a link to a sample if possible and not confidential).
3. `pdf22png --version` (if available, or commit hash)
4. macOS version:

**Expected behavior**
A clear and concise description of what you expected to happen.

**Actual behavior**
A clear and concise description of what actually happened. Include any error messages.

**Screenshots or Output PNGs**
If applicable, add screenshots or the problematic output PNGs to help explain your problem.
If the input PDF is not confidential and can be shared, please attach it or link to it.

**Additional context**
Add any other context about the problem here. For example:
- Specific PDF features that might be involved (e.g., layers, transparency, forms, annotations).
- Any relevant console output if run with `-v` (verbose).
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature Request
about: Suggest an idea for pdf22png
title: "[FEAT] Brief description of feature"
labels: enhancement
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. "I'm always frustrated when..."

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
- Why would this feature be useful?
- How would it improve `pdf22png`?
- Are there similar features in other tools that could serve as inspiration?
</file>

<file path=".github/workflows/build.yml">
name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        os: [macos-12, macos-13, macos-14]

    steps:
    - uses: actions/checkout@v4

    - name: Build
      run: make

    - name: Run tests
      run: make test

    - name: Build universal binary
      run: make universal

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pdf22png-${{ matrix.os }}
        path: pdf22png
</file>

<file path=".github/FUNDING.yml">
# These are supported funding model platforms

github: [twardoch] # Replace with your GitHub username or organization
patreon: # Replace with your Patreon username
open_collective: # Replace with your Open Collective username
ko_fi: # Replace with your Ko-fi username
tidelift: # Replace with your Tidelift platform-name/package-name e.g., npm/babel
community_bridge: # Replace with your Community Bridge project-name e.g., cloud-foundry
liberapay: # Replace with your Liberapay username
issuehunt: # Replace with your IssueHunt username
otechie: # Replace with your Otechie username
custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']
</file>

<file path=".specstory/.gitignore">
# SpecStory explanation file
/.what-is-this.md
</file>

<file path="docs/API.md">
# pdf22png API Documentation

While `pdf22png` is primarily a command-line tool, its core logic is written in Objective-C and could potentially be adapted for direct use within other macOS applications or scripts. This document provides a high-level overview of the key structures and functions.

## Core Structures

### `Options`
Defined in `src/pdf22png.h`

This structure holds all the configurable parameters for the PDF conversion process.

```objectivec
typedef struct {
    ScaleSpec scale;            // See ScaleSpec below
    NSInteger pageNumber;       // Specific page to convert (1-based)
    NSString *inputPath;        // Path to the input PDF file (nil for stdin)
    NSString *outputPath;       // Path for the output PNG file or prefix for batch
    NSString *outputDirectory;  // Directory for batch output
    BOOL batchMode;             // YES if converting all pages
    BOOL transparentBackground; // YES to render with transparency
    int pngQuality;             // PNG quality/compression hint (0-9)
    BOOL verbose;               // YES for verbose logging
} Options;
```

### `ScaleSpec`
Defined in `src/pdf22png.h`

This structure defines how the PDF page should be scaled.

```objectivec
typedef struct {
    CGFloat scaleFactor;  // e.g., 1.0, 1.5, 0.75
    CGFloat maxWidth;     // Max width in pixels for 'WxH' or 'Wx' scaling
    CGFloat maxHeight;    // Max height in pixels for 'WxH' or 'xH' scaling
    CGFloat dpi;          // Dots Per Inch for scaling
    BOOL isPercentage;    // YES if scaleFactor is from a 'NNN%' input
    BOOL isDPI;           // YES if scaling is based on DPI
    BOOL hasWidth;        // YES if maxWidth is set
    BOOL hasHeight;       // YES if maxHeight is set
} ScaleSpec;
```

## Key Functions

The primary logic is found in `src/pdf22png.m` and utility functions in `src/utils.m`.

### Main Entry Point (Conceptual)
The `main` function in `src/pdf22png.m` orchestrates the process:
1.  Parses command-line arguments into an `Options` struct (`parseArguments`).
2.  Reads PDF data (`readPDFData` from `utils.m`).
3.  Creates a `CGPDFDocumentRef` from the data.
4.  Either processes a single page (`processSinglePage`) or all pages in batch mode (`processBatchMode`).

### Core Conversion Functions

*   **`BOOL parseArguments(int argc, const char *argv[])`** (in `pdf22png.m`)
    *   Parses command-line arguments and populates the `Options` struct.
    *   Handles help messages and argument validation.

*   **`BOOL parseScaleSpec(const char *spec, ScaleSpec *scale)`** (in `utils.m`)
    *   Parses the string provided to the `-s` or `-r` option into a `ScaleSpec` struct.

*   **`NSData *readPDFData(NSString *inputPath, BOOL verbose)`** (in `utils.m`)
    *   Reads PDF file data from the given path or from stdin if `inputPath` is `nil`.

*   **`CGFloat calculateScaleFactor(ScaleSpec *scale, CGRect pageRect)`** (in `utils.m`)
    *   Calculates the final `CGFloat` scale factor to be applied, based on the `ScaleSpec` and the PDF page's dimensions.

*   **`CGImageRef renderPDFPageToImage(CGPDFPageRef pdfPage, CGFloat scaleFactor, BOOL transparentBackground, BOOL verbose)`** (in `utils.m`)
    *   Takes a `CGPDFPageRef` and a scale factor.
    *   Renders the page into a `CGImageRef` (a bitmap image).
    *   Handles background transparency.

*   **`BOOL writeImageToFile(CGImageRef image, NSString *outputPath, int pngQuality, BOOL verbose)`** (in `utils.m`)
    *   Writes the given `CGImageRef` to the specified `outputPath` as a PNG file.

*   **`BOOL writeImageAsPNG(CGImageRef image, NSFileHandle *output, int pngQuality, BOOL verbose)`** (in `utils.m`)
    *   Writes the `CGImageRef` as PNG data to the given `NSFileHandle` (e.g., stdout).

*   **`BOOL processSinglePage(CGPDFDocumentRef pdfDocument, Options *options)`** (in `pdf22png.m`)
    *   Orchestrates the conversion of a single PDF page based on `options`.

*   **`BOOL processBatchMode(CGPDFDocumentRef pdfDocument, Options *options)`** (in `pdf22png.m`)
    *   Orchestrates the conversion of all pages in a PDF document, typically using Grand Central Dispatch (`dispatch_apply`) for parallel processing.

### Helper Functions

*   **`void printUsage(const char *programName)`** (in `pdf22png.m`)
*   **`NSString *getOutputPrefix(Options *options)`** (in `utils.m`)
*   **`void logMessage(BOOL verbose, NSString *format, ...)`** (in `utils.m`)

## Using the Code

To use this code directly:
1.  Include `pdf22png.h` and `utils.h`.
2.  Compile and link `pdf22png.m` and `utils.m` with your project.
3.  Ensure your project links against the necessary frameworks: `Foundation`, `Quartz` (which includes CoreGraphics/PDFKit functionalities), and `ImageIO`.
4.  Manually populate an `Options` struct with your desired settings.
5.  Obtain a `CGPDFDocumentRef` for your PDF.
6.  Call `processSinglePage` or `processBatchMode`, or adapt their internal logic (like `renderPDFPageToImage` and `writeImageToFile`) for your specific needs.

This provides a starting point. The code is designed for CLI execution, so error handling often involves `fprintf` to `stderr` and `exit(1)`. For library use, you might want to adapt this to return `NSError` objects or use other error reporting mechanisms.
</file>

<file path="docs/EXAMPLES.md">
# pdf22png Examples

This page shows common use cases and examples for the `pdf22png` command-line tool.

## Basic Conversions

**1. Convert the first page of a PDF to a PNG:**

```bash
pdf22png input.pdf output.png
```
*   Reads `input.pdf`.
*   Converts page 1.
*   Saves as `output.png` at default resolution (144 DPI).

**2. Convert a specific page (e.g., page 5):**

```bash
pdf22png -p 5 input.pdf page_5_output.png
```

**3. Read PDF from stdin, write PNG to stdout:**

```bash
cat input.pdf | pdf22png - - > output.png
# OR
pdf22png - - < input.pdf > output.png
```
*   Note: `-` is used for both input (stdin) and output (stdout).

## Resolution and Scaling

**4. Convert with a specific DPI (e.g., 300 DPI):**

```bash
pdf22png -r 300dpi input.pdf high_res_output.png
# or
pdf22png --resolution 300 input.pdf high_res_output.png
```

**5. Scale the output image by a factor (e.g., 2x larger):**

```bash
pdf22png -s 2.0 input.pdf large_output.png
# or by percentage
pdf22png -s 200% input.pdf large_output.png
```

**6. Fit output image to a specific width (e.g., 800px wide), maintaining aspect ratio:**

```bash
pdf22png -s 800x input.pdf width_800_output.png
```

**7. Fit output image to a specific height (e.g., 600px high), maintaining aspect ratio:**

```bash
pdf22png -s x600 input.pdf height_600_output.png
```

**8. Fit output image within specific dimensions (e.g., max 500px width and 500px height):**

```bash
pdf22png -s 500x500 input.pdf bounded_output.png
```

## Batch Conversion (All Pages)

**9. Convert all pages of a PDF, saving in the current directory:**
   Output files will be named `input-001.png`, `input-002.png`, etc. (assuming input file is `input.pdf`)

```bash
pdf22png -a input.pdf
```

**10. Convert all pages, specifying an output prefix:**
    Output files will be named `myprefix-001.png`, `myprefix-002.png`, etc.

```bash
pdf22png -a input.pdf myprefix
# or using -o for prefix
pdf22png -a -o myprefix input.pdf
```

**11. Convert all pages and save them into a specific directory:**
    Output files will be in `output_directory/input-001.png`, etc.

```bash
pdf22png -d ./output_directory input.pdf
```

**12. Convert all pages, save to a directory with a custom prefix:**
    Output files will be in `output_dir/custom_prefix-001.png`, etc.

```bash
pdf22png -d ./output_dir -o custom_prefix input.pdf
```

## Transparency and Quality

**13. Convert with a transparent background (if PDF page has transparency):**

```bash
pdf22png -t input.pdf transparent_output.png
```

**14. Specify PNG quality (0-9, informational for PNG):**

```bash
pdf22png -q 8 input.pdf quality_8_output.png
```
*   Note: PNG is a lossless format. This option is more relevant for formats like JPEG. For PNG, it might influence compression effort/speed in some libraries, but CoreGraphics offers limited direct control.

## Verbose Output

**15. Get detailed logs during conversion:**

```bash
pdf22png -v input.pdf output.png
```
*   Useful for debugging or understanding the conversion process.

## Combining Options

**16. Convert page 3 of `mydoc.pdf` to `page3_high_res.png` at 300 DPI with a transparent background:**

```bash
pdf22png -p 3 -r 300 -t mydoc.pdf page3_high_res.png
```

**17. Convert all pages of `report.pdf` to a subdirectory `report_images`, scaled to 50% size, with verbose output:**

```bash
pdf22png -a -s 50% -d ./report_images -v report.pdf
```
</file>

<file path="docs/USAGE.md">
# pdf22png Usage

`pdf22png` is a command-line tool to convert PDF documents to PNG images on macOS.

## Synopsis

```bash
pdf22png [OPTIONS] <input.pdf> [output.png | output_format_%%d.png]
```

## Arguments

*   `<input.pdf>`: (Required) The path to the input PDF file. Use `-` to read from stdin.
*   `[output.png | output_format_%%d.png]`: (Optional) The name for the output PNG file.
    *   In single page mode: If specified, this is the exact output filename. If omitted and input is a file, it's an error. If omitted and input is stdin, output goes to stdout.
    *   In batch mode (`-a` or `-d`): This is treated as a filename prefix. Page numbers will be appended (e.g., `prefix-001.png`). If omitted, the prefix is derived from the input filename or defaults to "page".
    *   Use `-` for stdout in single page mode. Cannot be used with batch mode.

## Options

| Short | Long           | Argument        | Description                                                                                                | Default        |
|-------|----------------|-----------------|------------------------------------------------------------------------------------------------------------|----------------|
| `-p`  | `--page`       | `<n>`           | Convert a specific page number. Ignored if `-a` or `-d` is used.                                             | `1`            |
| `-a`  | `--all`        |                 | Convert all pages in the PDF. If `-d` is not given, output files are placed in the current directory.        | Disabled       |
| `-r`  | `--resolution` | `<dpi>`         | Set the output resolution in Dots Per Inch (e.g., `150`, `300dpi`).                                          | `144dpi`       |
| `-s`  | `--scale`      | `<spec>`        | Set the scaling for the output image. Overridden by `-r` if both specify numeric scaling. See syntax below.  | `1.0` or `100%`|
| `-t`  | `--transparent`|                 | Render the PNG with a transparent background instead of white.                                               | Disabled       |
| `-q`  | `--quality`    | `<n>`           | PNG compression quality (0-9). Higher is typically less compression. (Currently informational for PNG)     | `6`            |
| `-o`  | `--output`     | `<path/prefix>` | Specify the output file path or prefix for batch mode. Use `-` for stdout (single page only).                | Varies         |
| `-d`  | `--directory`  | `<dir>`         | Specify the output directory for batch mode. Implies `-a`.                                                   | Current dir    |
| `-v`  | `--verbose`    |                 | Enable verbose logging output to stderr.                                                                     | Disabled       |
| `-h`  | `--help`       |                 | Display the help message and exit.                                                                         |                |

### Scale Specification (`-s, --scale <spec>`)

The `<spec>` argument for the scale option can be:

*   **Percentage:** `NNN%` (e.g., `150%` for 1.5x scale, `50%` for 0.5x scale).
*   **Factor:** `N.N` (e.g., `2.0` for 2x scale, `0.75` for 0.75x scale).
*   **Dimensions:**
    *   `WxH`: Fit image within `W` pixels width AND `H` pixels height, maintaining aspect ratio (e.g., `800x600`).
    *   `Wx`: Fit image to `W` pixels width, height is auto-scaled (e.g., `1024x`).
    *   `xH`: Fit image to `H` pixels height, width is auto-scaled (e.g., `x768`).
*   **DPI (alternative to `-r`):** `NNNdpi` (e.g., `300dpi`). If both `-s NNNdpi` and `-r NNNdpi` are used, the last one parsed takes precedence. It's recommended to use `-r` for DPI settings for clarity.

### Default Behavior

*   If no input file is given and stdin is not a pipe, an error occurs.
*   If input is from stdin and no output is specified via `-o` or a positional argument, output goes to stdout (single page mode only).
*   If `-a` or `-d` is used (batch mode):
    *   All pages are converted.
    *   If `-d` is not specified, output is to the current directory.
    *   If `-o` is not specified, the output filename prefix is derived from the input PDF's name (e.g., `input.pdf` -> `input-`). If input is stdin, prefix is `page-`.
    *   Output filenames are formatted as `<prefix><page_number_padded_with_zeros>.png` (e.g., `mypdf-001.png`, `mypdf-002.png`).

See `EXAMPLES.md` for practical examples.
</file>

<file path="homebrew/pdf22png.rb">
class Pdf22png < Formula
  desc "High-performance PDF to PNG converter for macOS"
  homepage "https://github.com/twardoch/pdf22png"
  url "https://github.com/twardoch/pdf22png/archive/refs/tags/v1.0.0.tar.gz"
  sha256 "YOUR_SHA256_HERE"
  license "MIT"
  head "https://github.com/twardoch/pdf22png.git", branch: "main"

  depends_on :macos

  def install
    system "make", "PREFIX=#{prefix}"
    system "make", "install", "PREFIX=#{prefix}"
  end

  test do
    # Create a simple test PDF
    (testpath/"test.pdf").write <<~EOS
      %PDF-1.4
      1 0 obj << /Type /Catalog /Pages 2 0 R >> endobj
      2 0 obj << /Type /Pages /Kids [3 0 R] /Count 1 >> endobj
      3 0 obj << /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] >> endobj
      xref
      0 4
      0000000000 65535 f
      0000000009 00000 n
      0000000058 00000 n
      0000000115 00000 n
      trailer << /Size 4 /Root 1 0 R >>
      startxref
      190
      %%EOF
    EOS

    system "#{bin}/pdf22png", "test.pdf", "output.png"
    assert_predicate testpath/"output.png", :exist?
  end
end
</file>

<file path="scripts/install.sh">
#!/usr/bin/env bash
# this_file: scripts/install.sh

set -euo pipefail

REPO="twardoch/pdf22png"
INSTALL_DIR="/usr/local/bin"

echo "Installing pdf22png..."

# Check if Homebrew is installed
if command -v brew &> /dev/null; then
    echo "Homebrew detected. Installing via Homebrew..."
    brew tap twardoch/tap
    brew install pdf22png
else
    echo "Building from source..."

    # Clone repo
    git clone "https://github.com/${REPO}.git" /tmp/pdf22png
    cd /tmp/pdf22png

    # Build
    make

    # Install
    sudo make install

    # Cleanup
    cd -
    rm -rf /tmp/pdf22png
fi

echo "Installation complete! Run 'pdf22png --help' to get started."
</file>

<file path="scripts/uninstall.sh">
#!/usr/bin/env bash
# this_file: scripts/uninstall.sh

# Uninstallation script for pdf22png

set -euo pipefail

PRODUCT_NAME="pdf22png"
INSTALL_DIR="/usr/local/bin"
INSTALLED_PATH="${INSTALL_DIR}/${PRODUCT_NAME}"

echo "Uninstalling ${PRODUCT_NAME}..."

if [ -f "${INSTALLED_PATH}" ]; then
    echo "Found ${PRODUCT_NAME} at ${INSTALLED_PATH}."
    # Check if it was installed by Homebrew
    if command -v brew &> /dev/null && brew list --formula | grep -q "^${PRODUCT_NAME}\$" ; then
        echo "${PRODUCT_NAME} appears to be installed via Homebrew."
        echo "Please run 'brew uninstall ${PRODUCT_NAME}' to remove it."
        # Optionally, ask if user wants to proceed with Homebrew uninstall
        # read -p "Do you want to run 'brew uninstall ${PRODUCT_NAME}' now? (y/N) " choice
        # case "$choice" in
        #   y|Y ) brew uninstall ${PRODUCT_NAME};;
        #   * ) echo "Skipping Homebrew uninstall.";;
        # esac
        exit 0
    elif command -v brew &> /dev/null && brew list --cask | grep -q "^${PRODUCT_NAME}\$" ; then
        echo "${PRODUCT_NAME} appears to be installed as a Homebrew Cask."
        echo "Please run 'brew uninstall --cask ${PRODUCT_NAME}' to remove it."
        exit 0
    else
        echo "Attempting to remove ${PRODUCT_NAME} from ${INSTALLED_PATH}..."
        if sudo rm -f "${INSTALLED_PATH}"; then
            echo "${PRODUCT_NAME} removed successfully."
        else
            echo "Failed to remove ${PRODUCT_NAME}. You may need to run this script with sudo or remove it manually."
            exit 1
        fi
    fi
else
    echo "${PRODUCT_NAME} not found at ${INSTALLED_PATH} (standard location)."
    echo "If you installed it to a custom location, you may need to remove it manually."
    echo "If installed via Homebrew, try 'brew uninstall ${PRODUCT_NAME}'."
fi

# Attempt to remove from common tap if it exists (best effort)
TAP_OWNER="twardoch" # As per install script
TAP_NAME="tap"       # As per install script
FORMULA_PATH_IN_TAP="Formula/${PRODUCT_NAME}.rb" # Common pattern for taps

if command -v brew &> /dev/null; then
    TAP_DIR_STANDARD="$(brew --prefix)/Homebrew/Library/Taps/${TAP_OWNER}/${TAP_NAME}"
    TAP_DIR_ALTERNATIVE="/opt/homebrew/Library/Taps/${TAP_OWNER}/${TAP_NAME}" # For Apple Silicon default brew location

    FORMULA_IN_TAP_STANDARD="${TAP_DIR_STANDARD}/${FORMULA_PATH_IN_TAP}"
    FORMULA_IN_TAP_ALTERNATIVE="${TAP_DIR_ALTERNATIVE}/${FORMULA_PATH_IN_TAP}"

    # Check if the formula file exists within a known tap structure
    # This is a heuristic and might not cover all tap configurations.
    # A more robust check would be `brew tap | grep ...` but that's more complex to parse reliably.

    # We don't automatically untap, as the user might have other formulae from the same tap.
    # We also don't remove the formula file from the tap, as `brew uninstall` should handle that.
    # This section is more for informational purposes.
    if [ -f "${FORMULA_IN_TAP_STANDARD}" ] || [ -f "${FORMULA_IN_TAP_ALTERNATIVE}" ]; then
        echo "Note: If you installed via 'brew tap ${TAP_OWNER}/${TAP_NAME}', the tap itself ('${TAP_OWNER}/${TAP_NAME}') is not automatically removed."
        echo "You can untap it using 'brew untap ${TAP_OWNER}/${TAP_NAME}' if you no longer need any formulae from it."
    fi
fi


echo "Uninstallation process complete."
</file>

<file path="Sources/TestFile.swift">
// This is a test file
let test = 123
</file>

<file path="Tests/pdf22pngTests/pdf22pngTests.swift">
import XCTest
import CoreGraphics
@testable import pdf22png // Imports the executable target's public symbols

final class PDF22PNGTests: XCTestCase {

    // MARK: - Helper Methods
    func createTempFile(filename: String, content: String) throws -> URL {
        let tempDir = FileManager.default.temporaryDirectory
        let fileURL = tempDir.appendingPathComponent(UUID().uuidString + "-" + filename) // Add UUID to avoid collisions
        try content.write(to: fileURL, atomically: true, encoding: .utf8)
        // print("Created temp file: \(fileURL.path)") // For debugging tests
        return fileURL
    }

    func createDummyPDFContent() -> String {
        return """
        %PDF-1.4
        1 0 obj << /Type /Catalog /Pages 2 0 R >> endobj
        2 0 obj << /Type /Pages /Kids [3 0 R] /Count 1 >> endobj
        3 0 obj << /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Resources <<>> >> endobj
        xref
        0 4
        0000000000 65535 f
        0000000009 00000 n
        0000000058 00000 n
        0000000127 00000 n
        trailer << /Size 4 /Root 1 0 R >>
        startxref
        202
        %%EOF
        """
    }

    // Clean up any temp files created during tests
    override func tearDown() {
        super.tearDown()
        // Example: remove files from a specific temp test directory if one was used
        // For now, individual tests creating files with UUIDs should be okay as OS cleans /tmp
    }

    // MARK: - Scale Specification Parsing Tests
    func testParseScaleSpec_percentage() throws {
        let scale = try parseScaleSpecification(from: "150%")
        XCTAssertTrue(scale.isPercentage)
        XCTAssertEqual(scale.scaleFactor, 1.5, accuracy: 0.001)
        XCTAssertFalse(scale.isDPI)
    }

    func testParseScaleSpec_dpi() throws {
        let scale = try parseScaleSpecification(from: "300dpi")
        XCTAssertTrue(scale.isDPI)
        XCTAssertEqual(scale.dpi, 300, accuracy: 0.001)
        XCTAssertFalse(scale.isPercentage)
    }

    func testParseScaleSpec_dpiCaseInsensitive() throws {
        let scale = try parseScaleSpecification(from: "72DPI")
        XCTAssertTrue(scale.isDPI)
        XCTAssertEqual(scale.dpi, 72, accuracy: 0.001)
    }

    func testParseScaleSpec_widthAndHeight() throws {
        let scale = try parseScaleSpecification(from: "800x600")
        XCTAssertTrue(scale.hasWidth)
        XCTAssertTrue(scale.hasHeight)
        XCTAssertEqual(scale.maxWidth, 800, accuracy: 0.001)
        XCTAssertEqual(scale.maxHeight, 600, accuracy: 0.001)
    }

    func testParseScaleSpec_widthAndHeightCaseInsensitiveX() throws {
        let scale = try parseScaleSpecification(from: "100X200")
        XCTAssertTrue(scale.hasWidth)
        XCTAssertTrue(scale.hasHeight)
        XCTAssertEqual(scale.maxWidth, 200, accuracy: 0.001) // Width is after X
        XCTAssertEqual(scale.maxHeight, 100, accuracy: 0.001) // Height is before X
    }


    func testParseScaleSpec_widthOnly() throws {
        let scale = try parseScaleSpecification(from: "1024x")
        XCTAssertTrue(scale.hasWidth)
        XCTAssertFalse(scale.hasHeight) // Corrected: original ObjC test was also XCTAssertFalse
        XCTAssertEqual(scale.maxWidth, 1024, accuracy: 0.001)
    }

    func testParseScaleSpec_heightOnly() throws {
        let scale = try parseScaleSpecification(from: "x768")
        XCTAssertFalse(scale.hasWidth) // Corrected: original ObjC test was also XCTAssertFalse
        XCTAssertTrue(scale.hasHeight)
        XCTAssertEqual(scale.maxHeight, 768, accuracy: 0.001)
    }

    func testParseScaleSpec_factor() throws {
        let scale = try parseScaleSpecification(from: "2.5")
        XCTAssertFalse(scale.isPercentage)
        XCTAssertFalse(scale.isDPI)
        XCTAssertFalse(scale.hasWidth)
        XCTAssertFalse(scale.hasHeight)
        XCTAssertEqual(scale.scaleFactor, 2.5, accuracy: 0.001)
    }

    func testParseScaleSpec_invalid() {
        XCTAssertThrowsError(try parseScaleSpecification(from: "abc")) { error in
            XCTAssertTrue(error is ParsingError)
        }
        XCTAssertThrowsError(try parseScaleSpecification(from: "150%dpi"))
        XCTAssertThrowsError(try parseScaleSpecification(from: "x")) // "x" alone is invalid
        XCTAssertThrowsError(try parseScaleSpecification(from: "-100%"))
        XCTAssertThrowsError(try parseScaleSpecification(from: "0dpi"))
        XCTAssertThrowsError(try parseScaleSpecification(from: "0x100"))
        XCTAssertThrowsError(try parseScaleSpecification(from: "100x0"))
        XCTAssertThrowsError(try parseScaleSpecification(from: "-2.0"))
    }

    // MARK: - Scale Factor Calculation Tests
    func testCalculateScaleFactor_percentage() {
        var scaleSpec = ScaleSpecification()
        scaleSpec.isPercentage = true
        scaleSpec.scaleFactor = 1.5
        let pageRect = CGRect(x: 0, y: 0, width: 100, height: 200)
        let factor = calculateScaleFactor(for: scaleSpec, pageRect: pageRect)
        XCTAssertEqual(factor, 1.5, accuracy: 0.001)
    }

    func testCalculateScaleFactor_dpi() {
        var scaleSpec = ScaleSpecification()
        scaleSpec.isDPI = true
        scaleSpec.dpi = 144
        let pageRect = CGRect(x: 0, y: 0, width: 72, height: 72) // 1x1 inch page
        let factor = calculateScaleFactor(for: scaleSpec, pageRect: pageRect)
        XCTAssertEqual(factor, 2.0, accuracy: 0.001) // 144dpi / 72dpi_pdf = 2.0
    }

    func testCalculateScaleFactor_fitWidthAndHeight() {
        var scaleSpec = ScaleSpecification()
        scaleSpec.hasWidth = true
        scaleSpec.maxWidth = 100
        scaleSpec.hasHeight = true
        scaleSpec.maxHeight = 100

        // Page is taller (200x400), should scale by height (100/400 = 0.25)
        var pageRect = CGRect(x: 0, y: 0, width: 200, height: 400)
        var factor = calculateScaleFactor(for: scaleSpec, pageRect: pageRect)
        XCTAssertEqual(factor, 0.25, accuracy: 0.001)

        // Page is wider (400x200), should scale by width (100/400 = 0.25)
        pageRect = CGRect(x: 0, y: 0, width: 400, height: 200)
        factor = calculateScaleFactor(for: scaleSpec, pageRect: pageRect)
        XCTAssertEqual(factor, 0.25, accuracy: 0.001)
    }

    func testCalculateScaleFactor_factor() {
        var scaleSpec = ScaleSpecification()
        scaleSpec.scaleFactor = 3.0 // No other flags set
        let pageRect = CGRect(x: 0, y: 0, width: 100, height: 100)
        let factor = calculateScaleFactor(for: scaleSpec, pageRect: pageRect)
        XCTAssertEqual(factor, 3.0, accuracy: 0.001)
    }

    func testCalculateScaleFactor_defaultDPI() {
        // Test default DPI scaling when no other spec is given
        let scaleSpec = ScaleSpecification(dpi: ScaleSpecification.defaultDPI, isDPI: true) // Simulates default
        let pageRect = CGRect(x: 0, y: 0, width: 72, height: 72) // 1-inch page
        let factor = calculateScaleFactor(for: scaleSpec, pageRect: pageRect)
        XCTAssertEqual(factor, ScaleSpecification.defaultDPI / 72.0, accuracy: 0.001)
    }

    // MARK: - PDF Data Reading Tests
    func testReadPDFData_fileNotFound() {
        XCTAssertThrowsError(try readPDFData(from: "/non/existent/file.pdf", verbose: false)) { error in
            XCTAssertTrue(error is FileError)
            if case FileError.readFailed = error {
                // Expected
            } else {
                XCTFail("Expected FileError.readFailed, got \(error)")
            }
        }
    }

    func testReadPDFData_validFile() throws {
        let pdfContent = createDummyPDFContent()
        let tempFileURL = try createTempFile(filename: "test_valid.pdf", content: pdfContent)
        defer { try? FileManager.default.removeItem(at: tempFileURL) }

        let data = try readPDFData(from: tempFileURL.path, verbose: false)
        XCTAssertNotNil(data)
        XCTAssertGreaterThan(data.count, 0)
    }

    // testReadPDFData_stdin is hard to test in unit tests without external piping.

    // MARK: - Output Prefix Tests
    func testGetOutputPrefix() {
        XCTAssertEqual(getOutputPrefix(inputPath: "/path/to/mydoc.pdf", outputPathFromArgs: nil), "mydoc")
        XCTAssertEqual(getOutputPrefix(inputPath: "no_extension_doc", outputPathFromArgs: nil), "no_extension_doc")
        XCTAssertEqual(getOutputPrefix(inputPath: nil, outputPathFromArgs: nil), "page", "Prefix should be 'page' for stdin without output arg")
        XCTAssertEqual(getOutputPrefix(inputPath: "/path/to/some.pdf", outputPathFromArgs: "custom_prefix.png"), "custom_prefix")
        XCTAssertEqual(getOutputPrefix(inputPath: "/path/to/some.pdf", outputPathFromArgs: "another_custom_prefix"), "another_custom_prefix")

        // Output is stdout, prefix from input
        XCTAssertEqual(getOutputPrefix(inputPath: "/path/to/another.pdf", outputPathFromArgs: "-"), "another")
        // Output is stdout, input is stdin, prefix is "page"
        XCTAssertEqual(getOutputPrefix(inputPath: nil, outputPathFromArgs: "-"), "page")
    }

    // MARK: - Page Range Parsing Tests
    func testParsePageRange_valid() throws {
        XCTAssertEqual(try parsePageRange("1", totalPages: 10), [1])
        XCTAssertEqual(try parsePageRange("1-3", totalPages: 10), [1, 2, 3])
        XCTAssertEqual(try parsePageRange("1,3,5", totalPages: 10), [1, 3, 5])
        XCTAssertEqual(try parsePageRange("2-4,7,1-2", totalPages: 10), [1, 2, 3, 4, 7]) // sorted and unique
        XCTAssertEqual(try parsePageRange("1-10", totalPages: 5), [1, 2, 3, 4, 5]) // Clamped to totalPages
        XCTAssertEqual(try parsePageRange("8-12", totalPages: 10), [8,9,10]) // Clamped
    }

    func testParsePageRange_invalid() {
        XCTAssertThrowsError(try parsePageRange("", totalPages: 10))
        XCTAssertThrowsError(try parsePageRange("abc", totalPages: 10))
        XCTAssertThrowsError(try parsePageRange("1-", totalPages: 10))
        XCTAssertThrowsError(try parsePageRange("-5", totalPages: 10))
        XCTAssertThrowsError(try parsePageRange("5-1", totalPages: 10)) // start > end
        XCTAssertThrowsError(try parsePageRange("0-5", totalPages: 10)) // page 0 is invalid
        XCTAssertThrowsError(try parsePageRange("11-15", totalPages: 10)) // All pages out of bounds
    }

    // MARK: - Filename Formatting Tests
    func testFormatFilenameWithPattern() {
        let basename = "mydoc"
        let pageNum = 5
        let totalPages = 20
        let text = "chapter-one"

        // Default pattern when text is provided
        var formatted = formatFilenameWithPattern(pattern: nil, basename: basename, pageNum: pageNum, totalPages: totalPages, extractedText: text, verbose: false)
        XCTAssertEqual(formatted, "mydoc-005--chapter-one")

        // Default pattern when text is nil
        formatted = formatFilenameWithPattern(pattern: nil, basename: basename, pageNum: pageNum, totalPages: totalPages, extractedText: nil, verbose: false)
        XCTAssertEqual(formatted, "mydoc-005")

        // Custom pattern
        let customPattern = "{basename}_p{page:04d}_total{total}_{text}"
        formatted = formatFilenameWithPattern(pattern: customPattern, basename: basename, pageNum: pageNum, totalPages: totalPages, extractedText: text, verbose: false)
        XCTAssertEqual(formatted, "mydoc_p0005_total20_chapter-one")

        // Custom pattern, no text
        formatted = formatFilenameWithPattern(pattern: customPattern, basename: basename, pageNum: pageNum, totalPages: totalPages, extractedText: nil, verbose: false)
        XCTAssertEqual(formatted, "mydoc_p0005_total20_") // {text} becomes empty

        // Date and time (hard to test exact values, check for presence)
        let patternWithDate = "{basename}_{date}_{time}"
        formatted = formatFilenameWithPattern(pattern: patternWithDate, basename: basename, pageNum: pageNum, totalPages: totalPages, extractedText: nil, verbose: false)
        XCTAssertTrue(formatted.contains("mydoc_"))
        XCTAssertTrue(formatted.count > "mydoc_".count + 8 + 6) // YYYYMMDD + HHMMSS
    }

    // MARK: - Slugify Text Tests
    func testSlugifyText() {
        XCTAssertEqual(slugifyText("Hello World!"), "hello-world")
        XCTAssertEqual(slugifyText("  Leading/Trailing Spaces  "), "leadingtrailing-spaces")
        XCTAssertEqual(slugifyText("Special Chars: éàç!@#$"), "special-chars-eac")
        XCTAssertEqual(slugifyText("This is a Very Long Title That Needs to be Truncated", maxLength: 20), "this-is-a-very-long") // Example, depends on exact logic
        XCTAssertEqual(slugifyText("---multiple---hyphens---", maxLength: 30), "multiple-hyphens")
        XCTAssertEqual(slugifyText(""), "")
        XCTAssertEqual(slugifyText("Already-Slug", maxLength: 30), "already-slug")
        XCTAssertEqual(slugifyText("!@#$", maxLength:30), "text") // Fallback for only special chars
    }

    // MARK: - Argument Parser Basic Tests (Placeholder)
    // Full CLI testing is more of an integration test.
    // Here, we just check if the parser can be invoked.
    func testArgumentParserBasicInvocation() throws {
        // Minimal valid arguments for non-batch mode
        let args = ["input.pdf", "output.png"]
        do {
            _ = try PDF22PNG.parseAsRoot(args)
            // If it doesn't throw, basic parsing setup is okay.
        } catch {
            // If input.pdf doesn't exist, it might throw ValidationError from `validate()`.
            // For this basic test, we're checking the parser structure more than validation logic.
            // To make it pass reliably, create dummy files or mock FileManager.
            // For now, let's accept ValidationError as it means parsing reached validation.
            if error is XCTestError { // If parseAsRoot itself fails structurally
                 XCTFail("PDF22PNG.parseAsRoot failed: \(error)")
            }
        }
    }

    // MARK: - File Overwrite Tests
    func testShouldOverwriteFile() throws {
        let tempFilename = "overwrite_test.txt"
        let tempFileURL = try createTempFile(filename: tempFilename, content: "initial content")
        defer { try? FileManager.default.removeItem(at: tempFileURL) }

        // File exists, force overwrite = true
        XCTAssertTrue(shouldOverwriteFile(filePath: tempFileURL.path, isInteractive: false, forceOverwrite: true, verbose: false))

        // File exists, force overwrite = false, non-interactive
        XCTAssertFalse(shouldOverwriteFile(filePath: tempFileURL.path, isInteractive: false, forceOverwrite: false, verbose: false))

        // File does not exist
        let nonExistentPath = FileManager.default.temporaryDirectory.appendingPathComponent("non_existent_file.txt").path
        XCTAssertTrue(shouldOverwriteFile(filePath: nonExistentPath, isInteractive: false, forceOverwrite: false, verbose: false))

        // Interactive mode would require mocking readLine() or running with actual stdin interaction,
        // which is complex for automated unit tests.
    }

    // MARK: - Rendering Test (Basic Placeholder)
    @available(macOS 10.15, *) // For async performOCROnImage
    func testBasicRendering() async throws {
        let pdfContent = createDummyPDFContent()
        guard let data = pdfContent.data(using: .ascii) else { // ascii for simple PDF string
            XCTFail("Failed to create data from dummy PDF string")
            return
        }
        guard let provider = CGDataProvider(data: data as CFData),
              let pdfDoc = CGPDFDocument(provider),
              let page1 = pdfDoc.page(at: 1) else {
            XCTFail("Failed to load dummy PDF document or page 1")
            return
        }

        var scaleSpec = ScaleSpecification()
        scaleSpec.scaleFactor = 1.0 // Render at 100%

        let scale = calculateScaleFactor(for: scaleSpec, pageRect: page1.getBoxRect(.mediaBox))

        do {
            let cgImage = try renderPDFPageToImage(pdfPage: page1, scaleFactor: scale, isTransparent: false, verbose: false)
            XCTAssertNotNil(cgImage)
            XCTAssertGreaterThan(cgImage.width, 0)
            XCTAssertGreaterThan(cgImage.height, 0)

            // Optionally, try to write it to a temp file
            let tempOutputURL = FileManager.default.temporaryDirectory.appendingPathComponent(UUID().uuidString + ".png")
            // defer { try? FileManager.default.removeItem(at: tempOutputURL) } // Clean up

            try writeImageToFile(image: cgImage, url: tempOutputURL, pngQuality: 6, verbose: false, dryRun: false, forceOverwrite: true, interactive: false)
            XCTAssertTrue(FileManager.default.fileExists(atPath: tempOutputURL.path))
            try? FileManager.default.removeItem(at: tempOutputURL) // Clean up immediately after check

        } catch {
            XCTFail("Rendering or writing dummy PDF page failed: \(error)")
        }
    }
}
</file>

<file path=".cursorrules">
# pdf22png

A high-performance command-line tool for converting PDF documents to PNG images on macOS, leveraging native Core Graphics and Quartz frameworks for optimal quality and speed.

## Features

- **Single & Batch Conversion**: Convert individual pages or entire PDF documents
- **Flexible Scaling Options**: 
  - Resolution control (DPI)
  - Percentage scaling
  - Fixed dimensions (width/height fitting)
  - Scale factors
- **Advanced Options**:
  - Transparent background support
  - PNG compression quality control
  - Verbose logging for debugging
- **I/O Flexibility**:
  - Read from files or stdin
  - Write to files, stdout, or batch output directories
  - Customizable output naming patterns
- **Native Performance**: Built with Objective-C using macOS native frameworks
- **Universal Binary**: Supports both Intel and Apple Silicon Macs

## Installation

### Using Homebrew (Recommended)

```bash
brew tap twardoch/homebrew-pdf22png
brew install pdf22png
```

### Building from Source

Requirements:
- macOS 10.15 or later
- Xcode Command Line Tools

```bash
git clone https://github.com/twardoch/pdf22png.git
cd pdf22png
make
sudo make install
```

To build a universal binary for both Intel and Apple Silicon:

```bash
make universal
```

## Usage

### Basic Syntax

```bash
pdf22png [OPTIONS] <input.pdf> [output.png]
```

### Quick Examples

Convert first page of a PDF:
```bash
pdf22png input.pdf output.png
```

Convert a specific page:
```bash
pdf22png -p 5 document.pdf page5.png
```

Convert all pages to individual PNGs:
```bash
pdf22png -a document.pdf
# Creates: document-001.png, document-002.png, etc.
```

Convert at 300 DPI resolution:
```bash
pdf22png -r 300 input.pdf high-res.png
```

Scale to 50% size:
```bash
pdf22png -s 50% input.pdf half-size.png
```

### Options

| Option | Long Form | Description | Default |
|--------|-----------|-------------|---------|
| `-p <n>` | `--page` | Convert specific page number | 1 |
| `-a` | `--all` | Convert all pages | disabled |
| `-r <dpi>` | `--resolution` | Set output DPI (e.g., 300) | 144 |
| `-s <spec>` | `--scale` | Scale specification (see below) | 100% |
| `-t` | `--transparent` | Preserve transparency | disabled |
| `-q <0-9>` | `--quality` | PNG compression quality | 6 |
| `-o <path>` | `--output` | Output file/prefix or `-` for stdout | - |
| `-d <dir>` | `--directory` | Output directory for batch mode | . |
| `-v` | `--verbose` | Enable verbose logging | disabled |
| `-h` | `--help` | Show help message | - |

### Scale Specifications

The `-s/--scale` option accepts various formats:

- **Percentage**: `150%` (1.5x scale)
- **Factor**: `2.0` (2x scale)
- **Fixed width**: `800x` (800px wide, height auto)
- **Fixed height**: `x600` (600px high, width auto)
- **Fit within**: `800x600` (fit within 800x600 box)

### Advanced Examples

Convert with transparent background at 300 DPI:
```bash
pdf22png -t -r 300 input.pdf transparent-300dpi.png
```

Batch convert all pages to a specific directory:
```bash
pdf22png -d ./output_images -o myprefix document.pdf
# Creates: ./output_images/myprefix-001.png, etc.
```

Pipe operations:
```bash
# From stdin to stdout
cat document.pdf | pdf22png - - > output.png

# Process and pipe to ImageMagick
pdf22png -r 300 input.pdf - | convert - -resize 50% final.jpg
```

## Architecture

pdf22png is built using:
- **Objective-C** with ARC (Automatic Reference Counting)
- **Core Graphics** for PDF rendering
- **Quartz** framework for image processing
- **ImageIO** for PNG output
- Native macOS APIs for optimal performance

The codebase is organized into:
- `src/pdf22png.m` - Main program logic and argument parsing
- `src/utils.m` - Utility functions for scaling, rendering, and I/O
- `tests/` - XCTest-based unit tests

## Performance

pdf22png is optimized for performance:
- Parallel processing for batch conversions using Grand Central Dispatch
- Efficient memory management with autoreleasepool usage
- Native Core Graphics rendering for best quality
- Minimal dependencies (only macOS system frameworks)


# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


pdf22png implements specialized PDF to PNG conversion logic leveraging macOS native frameworks. The core business functionality is organized around:

## Core Conversion Engine
The primary conversion logic resides in `src/pdf22png.m`, handling:
- PDF page rendering with customizable scaling
- Transparent background preservation 
- Quality-controlled PNG output generation
- Batch processing with parallel execution

## Scale Specification System
Located in `src/utils.m`, implements specialized scaling algorithms:
- Percentage-based scaling (e.g. "150%")
- Fixed dimension specifications (e.g. "800x600")
- DPI-based resolution control
- Aspect ratio preservation logic

## Output Management
Implements flexible output handling:
- Custom naming pattern generation for batch conversions
- Directory organization for multi-page outputs
- Stream-based processing for pipeline integration
- Transparent vs opaque background handling

## Platform Integration
Native integration with macOS frameworks:
- Core Graphics PDF parsing and rendering
- Quartz image processing pipeline
- Universal binary support for Intel/ARM
- System-level optimization for performance

## Processing Modes
Supports multiple operational modes:
- Single page conversion
- Full document batch processing
- Stream-based pipeline processing
- Interactive command-line interface

The business logic focuses on providing professional-grade PDF to PNG conversion with emphasis on flexibility, quality control, and integration capabilities for automated workflows.

—— When you’re done with a round of updates, update CHANGELOG.md with the changes, remove done things from TODO.md, identify new things that need to be done and add them to TODO.md. Then build the app or run ./release.sh and then continue updates.
</file>

<file path=".editorconfig">
# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

[*]
indent_style = space
indent_size = 4
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.md]
trim_trailing_whitespace = false

[Makefile]
indent_style = tab
indent_size = 4

[*.sh]
indent_style = space
indent_size = 2

[*.yml]
indent_style = space
indent_size = 2

[*.rb]
indent_style = space
indent_size = 2
</file>

<file path=".gitattributes">
# Auto detect text files and perform LF normalization
* text=auto eol=lf

# Explicitly declare files that will always have LF line endings on checkout
*.h text eol=lf
*.m text eol=lf
*.c text eol=lf
*.sh text eol=lf
*.md text eol=lf
*.txt text eol=lf
*.yml text eol=lf
*.yaml text eol=lf
*.rb text eol=lf
Makefile text eol=lf
LICENSE text eol=lf

# Explicitly declare files that are binary and should not be modified.
*.png binary
*.pdf binary
*.gz binary
*.zip binary
*.dmg binary
</file>

<file path="CMakeLists.txt">
# CMakeLists.txt for pdf22png
# Optional - to be implemented if CMake is chosen as an alternative build system.

# cmake_minimum_required(VERSION 3.10)
# project(pdf22png VERSION 1.0.0 LANGUAGES C OBJC)

# set(CMAKE_OBJC_STANDARD 11)
# set(CMAKE_OBJC_EXTENSIONS OFF)

# # macOS specific settings
# if(APPLE)
#     set(CMAKE_OSX_DEPLOYMENT_TARGET "10.15" CACHE STRING "Minimum macOS deployment version")
#     set(CMAKE_OBJC_FLAGS "${CMAKE_OBJC_FLAGS} -fobjc-arc")
# endif()

# # Add source files
# set(SOURCES
#     src/pdf22png.m
#     src/utils.m
#     src/pdf22png.h
#     src/utils.h
# )

# add_executable(${PROJECT_NAME} ${SOURCES})

# # Link frameworks
# if(APPLE)
#     target_link_libraries(${PROJECT_NAME} PRIVATE
#         "-framework Foundation"
#         "-framework CoreGraphics" # Part of ApplicationServices or QuartzCore usually
#         "-framework AppKit"      # For some Quartz types if not covered by CoreGraphics alone
#         # "-framework ImageIO"   # For kUTTypePNG etc.
#     )
#     # More specific framework linking might be needed depending on exact symbols used.
#     # For example, CGPDFDocumentRef is in CoreGraphics.
#     # kUTTypePNG is in ImageIO (MobileCoreServices on iOS, CoreServices on macOS).
#     # AppKit includes many higher-level services. Foundation is for basic types.
#     find_library(FOUNDATION_FRAMEWORK Foundation)
#     find_library(COREGRAPHICS_FRAMEWORK CoreGraphics)
#     find_library(APPKIT_FRAMEWORK AppKit) # For NSApplication, NSWindow etc. Not strictly needed for CLI CG.
#                                          # Quartz might be -framework Quartz (includes CoreGraphics)
#     find_library(IMAGEIO_FRAMEWORK ImageIO)


#     if(FOUNDATION_FRAMEWORK AND COREGRAPHICS_FRAMEWORK AND IMAGEIO_FRAMEWORK)
#         target_link_libraries(${PROJECT_NAME} PRIVATE
#             "${FOUNDATION_FRAMEWORK}"
#             "${COREGRAPHICS_FRAMEWORK}"
#             "${IMAGEIO_FRAMEWORK}"
#             # Consider AppKit if any UI related symbols are pulled inadvertently, or if future GUI is planned
#             # "${APPKIT_FRAMEWORK}"
#         )
#     else()
#         message(WARNING "Could not find all required macOS Frameworks for linking.")
#     endif()

# endif()

# # Install target
# install(TARGETS ${PROJECT_NAME} DESTINATION bin)

# # Enable testing with CTest
# enable_testing()

# # Add tests (example)
# # add_test(NAME MyTest COMMAND MyTestRunner)
# # set_tests_properties(MyTest PROPERTIES WORKING_DIRECTORY ${CMAKE_BINARY_DIR})

# message(STATUS "CMake configuration for pdf22png complete.")
</file>

<file path="LICENSE">
MIT License

Copyright (c) $(date +%Y) twardoch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="Package.swift">
// swift-tools-version:5.7
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: "pdf22png",
    platforms: [
        .macOS(.v10_15) // Based on existing requirements
    ],
    dependencies: [
        .package(url: "https://github.com/apple/swift-argument-parser.git", from: "1.2.0"),
    ],
    targets: [
        // Targets are the basic building blocks of a package. A target can define a module or a test suite.
        // Targets can depend on other targets in this package, and on products in packages this package depends on.
        .executableTarget(
            name: "pdf22png",
            dependencies: [
                .product(name: "ArgumentParser", package: "swift-argument-parser"),
            ],
            path: "Sources/pdf22png"
        ),
        .testTarget(
            name: "pdf22pngTests",
            dependencies: ["pdf22png"],
            path: "Tests/pdf22pngTests"
        ),
    ]
)
</file>

<file path="PROGRESS.md">
# Project Progress: pdf22png

This document tracks the progress of major features and milestones, especially in relation to the `TODO.md`.

## Current Phase: Initial Reorganization and v1.0 Release Candidate

**Objective**: Establish a robust project structure, implement core features, set up CI/CD, and prepare for an initial public release.

### Completed Milestones:
*   **Project Scaffolding**:
    *   [x] Directory structure established (src, tests, docs, .github, etc.).
    *   [x] Initial `.gitignore` created.
    *   [x] `Makefile` for build, install, clean, test, format, lint.
*   **Core Functionality**:
    *   [x] Renamed `pdfupng.m` to `src/pdf22png.m`.
    *   [x] Refactored code into modular components: `pdf22png.m`, `pdf22png.h`, `utils.m`, `utils.h`.
    *   [x] Implemented PDF to PNG conversion using Core Graphics.
    *   [x] Argument parsing for:
        *   [x] Input/Output files (including stdin/stdout).
        *   [x] Page selection (`-p`).
        *   [x] Batch mode (`-a`, `-d`).
        *   [x] Scaling (`-s`): percentage, factor, WxH, Wx, xH.
        *   [x] Resolution (`-r` DPI).
        *   [x] Transparency (`-t`).
        *   [x] PNG Quality hint (`-q`).
        *   [x] Verbose mode (`-v`).
        *   [x] Help (`-h`).
*   **Testing**:
    *   [x] Basic unit test structure using XCTest (`tests/test_pdf22png.m`).
    *   [x] Unit tests for `parseScaleSpec` and other utility functions.
    *   [x] Sample PDF fixture (`tests/fixtures/sample.pdf`).
    *   [x] Makefile `test` target configured to compile and run tests.
*   **CI/CD**:
    *   [x] GitHub Actions: `build.yml` for building and testing on macOS.
    *   [x] GitHub Actions: `release.yml` for creating releases and updating Homebrew formula (template).
*   **Distribution**:
    *   [x] Homebrew formula template (`homebrew/pdf22png.rb`).
*   **Documentation**:
    *   [x] `README.md` (comprehensive overview).
    *   [x] `docs/USAGE.md` (detailed command-line usage).
    *   [x] `docs/EXAMPLES.md` (practical examples).
    *   [x] `docs/API.md` (overview for code re-use).
    *   [x] `CHANGELOG.md` (tracking changes).
    *   [x] `TODO.md` (future plans).
    *   [x] `PROGRESS.md` (this file).

### In Progress / Next Steps (for v1.0):
*   [ ] **License File**: Choose and add `LICENSE` file (MIT or Apache 2.0).
*   [ ] **`.editorconfig`**: Add.
*   [ ] **`scripts/build-universal.sh`**: Implement.
*   [ ] **`scripts/uninstall.sh`**: Create.
*   [ ] **GitHub Issue Templates**: Create.
*   [ ] **GitHub Funding File**: Create.
*   [ ] **Thorough Testing**: Run `make test` and ensure all tests pass. Manually test CLI with various PDFs and options.
*   [ ] **Review & Refine**: Code review, documentation review.
*   [ ] **Tag v1.0.0**: Create the first official release tag.

### Future Goals (Post v1.0):
*   Refer to `TODO.md` for planned features like man page generation, advanced testing, color profile handling, etc.

This document will be updated as the project evolves.
</file>

<file path="README.html">
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <title></title>
  <meta name="Generator" content="Cocoa HTML Writer">
  <meta name="CocoaVersion" content="2575.6">
  <style type="text/css">
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica Light'}
    p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px 'Helvetica Light'; min-height: 14.0px}
  </style>
</head>
<body>
<p class="p1"># pdf22png</p>
<p class="p2"><br></p>
<p class="p1">[![Version](https://img.shields.io/github/v/release/twardoch/pdf22png?label=version)](https://github.com/twardoch/pdf22png/releases/latest)</p>
<p class="p1">[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)</p>
<p class="p1">[![Platform](https://img.shields.io/badge/platform-macOS-lightgrey.svg)](https://www.apple.com/macos/)</p>
<p class="p2"><br></p>
<p class="p1">A high-performance command-line tool for converting PDF documents to PNG images on macOS, leveraging native Core Graphics and Quartz frameworks for optimal quality and speed.</p>
<p class="p2"><br></p>
<p class="p1">## Features</p>
<p class="p2"><br></p>
<p class="p1">- **Single &amp; Batch Conversion**: Convert individual pages or entire PDF documents</p>
<p class="p1">- **Flexible Scaling Options**:<span class="Apple-converted-space"> </span></p>
<p class="p1"><span class="Apple-converted-space">  </span>- Resolution control (DPI)</p>
<p class="p1"><span class="Apple-converted-space">  </span>- Percentage scaling</p>
<p class="p1"><span class="Apple-converted-space">  </span>- Fixed dimensions (width/height fitting)</p>
<p class="p1"><span class="Apple-converted-space">  </span>- Scale factors</p>
<p class="p1">- **Advanced Options**:</p>
<p class="p1"><span class="Apple-converted-space">  </span>- Transparent background support</p>
<p class="p1"><span class="Apple-converted-space">  </span>- PNG compression quality control</p>
<p class="p1"><span class="Apple-converted-space">  </span>- Verbose logging for debugging</p>
<p class="p1">- **I/O Flexibility**:</p>
<p class="p1"><span class="Apple-converted-space">  </span>- Read from files or stdin</p>
<p class="p1"><span class="Apple-converted-space">  </span>- Write to files, stdout, or batch output directories</p>
<p class="p1"><span class="Apple-converted-space">  </span>- Customizable output naming patterns</p>
<p class="p1">- **Native Performance**: Built with Objective-C using macOS native frameworks</p>
<p class="p1">- **Universal Binary**: Supports both Intel and Apple Silicon Macs</p>
<p class="p2"><br></p>
<p class="p1">## Installation</p>
<p class="p2"><br></p>
<p class="p1">### Using Homebrew (Recommended)</p>
<p class="p2"><br></p>
<p class="p1">```bash</p>
<p class="p1">brew tap twardoch/homebrew-pdf22png</p>
<p class="p1">brew install pdf22png</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">### Building from Source</p>
<p class="p2"><br></p>
<p class="p1">Requirements:</p>
<p class="p1">- macOS 10.15 or later</p>
<p class="p1">- Xcode Command Line Tools</p>
<p class="p2"><br></p>
<p class="p1">```bash</p>
<p class="p1">git clone https://github.com/twardoch/pdf22png.git</p>
<p class="p1">cd pdf22png</p>
<p class="p1">make</p>
<p class="p1">sudo make install</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">To build a universal binary for both Intel and Apple Silicon:</p>
<p class="p2"><br></p>
<p class="p1">```bash</p>
<p class="p1">make universal</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">## Usage</p>
<p class="p2"><br></p>
<p class="p1">### Basic Syntax</p>
<p class="p2"><br></p>
<p class="p1">```bash</p>
<p class="p1">pdf22png [OPTIONS] &lt;input.pdf&gt; [output.png]</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">### Quick Examples</p>
<p class="p2"><br></p>
<p class="p1">Convert first page of a PDF:</p>
<p class="p1">```bash</p>
<p class="p1">pdf22png input.pdf output.png</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">Convert a specific page:</p>
<p class="p1">```bash</p>
<p class="p1">pdf22png -p 5 document.pdf page5.png</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">Convert all pages to individual PNGs:</p>
<p class="p1">```bash</p>
<p class="p1">pdf22png -a document.pdf</p>
<p class="p1"># Creates: document-001.png, document-002.png, etc.</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">Convert at 300 DPI resolution:</p>
<p class="p1">```bash</p>
<p class="p1">pdf22png -r 300 input.pdf high-res.png</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">Scale to 50% size:</p>
<p class="p1">```bash</p>
<p class="p1">pdf22png -s 50% input.pdf half-size.png</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">### Options</p>
<p class="p2"><br></p>
<p class="p1">| Option | Long Form | Description | Default |</p>
<p class="p1">|--------|-----------|-------------|---------|</p>
<p class="p1">| `-p &lt;n&gt;` | `--page` | Convert specific page number | 1 |</p>
<p class="p1">| `-a` | `--all` | Convert all pages | disabled |</p>
<p class="p1">| `-r &lt;dpi&gt;` | `--resolution` | Set output DPI (e.g., 300) | 144 |</p>
<p class="p1">| `-s &lt;spec&gt;` | `--scale` | Scale specification (see below) | 100% |</p>
<p class="p1">| `-t` | `--transparent` | Preserve transparency | disabled |</p>
<p class="p1">| `-q &lt;0-9&gt;` | `--quality` | PNG compression quality | 6 |</p>
<p class="p1">| `-o &lt;path&gt;` | `--output` | Output file/prefix or `-` for stdout | - |</p>
<p class="p1">| `-d &lt;dir&gt;` | `--directory` | Output directory for batch mode | . |</p>
<p class="p1">| `-v` | `--verbose` | Enable verbose logging | disabled |</p>
<p class="p1">| `-h` | `--help` | Show help message | - |</p>
<p class="p2"><br></p>
<p class="p1">### Scale Specifications</p>
<p class="p2"><br></p>
<p class="p1">The `-s/--scale` option accepts various formats:</p>
<p class="p2"><br></p>
<p class="p1">- **Percentage**: `150%` (1.5x scale)</p>
<p class="p1">- **Factor**: `2.0` (2x scale)</p>
<p class="p1">- **Fixed width**: `800x` (800px wide, height auto)</p>
<p class="p1">- **Fixed height**: `x600` (600px high, width auto)</p>
<p class="p1">- **Fit within**: `800x600` (fit within 800x600 box)</p>
<p class="p2"><br></p>
<p class="p1">### Advanced Examples</p>
<p class="p2"><br></p>
<p class="p1">Convert with transparent background at 300 DPI:</p>
<p class="p1">```bash</p>
<p class="p1">pdf22png -t -r 300 input.pdf transparent-300dpi.png</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">Batch convert all pages to a specific directory:</p>
<p class="p1">```bash</p>
<p class="p1">pdf22png -d ./output_images -o myprefix document.pdf</p>
<p class="p1"># Creates: ./output_images/myprefix-001.png, etc.</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">Pipe operations:</p>
<p class="p1">```bash</p>
<p class="p1"># From stdin to stdout</p>
<p class="p1">cat document.pdf | pdf22png - - &gt; output.png</p>
<p class="p2"><br></p>
<p class="p1"># Process and pipe to ImageMagick</p>
<p class="p1">pdf22png -r 300 input.pdf - | convert - -resize 50% final.jpg</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">## Architecture</p>
<p class="p2"><br></p>
<p class="p1">pdf22png is built using:</p>
<p class="p1">- **Objective-C** with ARC (Automatic Reference Counting)</p>
<p class="p1">- **Core Graphics** for PDF rendering</p>
<p class="p1">- **Quartz** framework for image processing</p>
<p class="p1">- **ImageIO** for PNG output</p>
<p class="p1">- Native macOS APIs for optimal performance</p>
<p class="p2"><br></p>
<p class="p1">The codebase is organized into:</p>
<p class="p1">- `src/pdf22png.m` - Main program logic and argument parsing</p>
<p class="p1">- `src/utils.m` - Utility functions for scaling, rendering, and I/O</p>
<p class="p1">- `tests/` - XCTest-based unit tests</p>
<p class="p2"><br></p>
<p class="p1">## Performance</p>
<p class="p2"><br></p>
<p class="p1">pdf22png is optimized for performance:</p>
<p class="p1">- Parallel processing for batch conversions using Grand Central Dispatch</p>
<p class="p1">- Efficient memory management with autoreleasepool usage</p>
<p class="p1">- Native Core Graphics rendering for best quality</p>
<p class="p1">- Minimal dependencies (only macOS system frameworks)</p>
<p class="p2"><br></p>
<p class="p1">## Contributing</p>
<p class="p2"><br></p>
<p class="p1">Contributions are welcome! Please feel free to submit issues, feature requests, or pull requests.</p>
<p class="p2"><br></p>
<p class="p1">### Development</p>
<p class="p2"><br></p>
<p class="p1">To build from source:</p>
<p class="p1">```bash</p>
<p class="p1">make</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">To run tests:</p>
<p class="p1">```bash</p>
<p class="p1">make test</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">### Releasing</p>
<p class="p2"><br></p>
<p class="p1">To create a new release:</p>
<p class="p1">```bash</p>
<p class="p1"># Automatic versioning (increments minor version)</p>
<p class="p1">./release.sh</p>
<p class="p2"><br></p>
<p class="p1"># Specify version explicitly</p>
<p class="p1">./release.sh --v 2.1.0</p>
<p class="p1">```</p>
<p class="p2"><br></p>
<p class="p1">This will:</p>
<p class="p1">1. Build the universal binary</p>
<p class="p1">2. Run tests</p>
<p class="p1">3. Create and push a git tag</p>
<p class="p1">4. Trigger GitHub Actions to build and publish release artifacts</p>
<p class="p2"><br></p>
<p class="p1">See [TODO.md](TODO.md) for planned features and improvements.</p>
<p class="p2"><br></p>
<p class="p1">## License</p>
<p class="p2"><br></p>
<p class="p1">pdf22png is released under the MIT License. See [LICENSE](LICENSE) for details.</p>
<p class="p2"><br></p>
<p class="p1">## Author</p>
<p class="p2"><br></p>
<p class="p1">- Created by [Adam Twardoch](https://github.com/twardoch)</p>
<p class="p1">- Developed using Anthropic software</p>
<p class="p2"><br></p>
<p class="p1">## See Also</p>
<p class="p2"><br></p>
<p class="p1">- [Usage Guide](docs/USAGE.md) - Detailed usage instructions</p>
<p class="p1">- [Examples](docs/EXAMPLES.md) - More usage examples</p>
<p class="p1">- [API Documentation](docs/API.md) - Function reference</p>
<p class="p1">- [Changelog](CHANGELOG.md) - Version history</p>
</body>
</html>
</file>

<file path="release.sh">
#!/bin/bash

# release.sh - Build, tag, and release pdf22png
# Usage: ./release.sh [--v A.B.C]

set -euo pipefail

# Color output for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to get the latest git tag version
get_latest_version() {
    local latest_tag=$(git tag -l "v*" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
    if [[ -n "$latest_tag" ]]; then
        echo "${latest_tag#v}"
    else
        echo ""
    fi
}

# Function to increment version
increment_version() {
    local version=$1
    local part=$2  # major, minor, patch
    
    IFS='.' read -r major minor patch <<< "$version"
    
    case $part in
        major)
            ((major++))
            minor=0
            patch=0
            ;;
        minor)
            ((minor++))
            patch=0
            ;;
        patch)
            ((patch++))
            ;;
    esac
    
    echo "$major.$minor.$patch"
}

# Function to validate version format
validate_version() {
    local version=$1
    if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        print_error "Invalid version format: $version"
        print_error "Version must be in format A.B.C (e.g., 1.0.0)"
        exit 1
    fi
}

# Parse command line arguments
VERSION=""
while [[ $# -gt 0 ]]; do
    case $1 in
        --v)
            VERSION="$2"
            validate_version "$VERSION"
            shift 2
            ;;
        *)
            print_error "Unknown option: $1"
            echo "Usage: $0 [--v A.B.C]"
            exit 1
            ;;
    esac
done

# Determine version
if [[ -z "$VERSION" ]]; then
    LATEST=$(get_latest_version)
    if [[ -z "$LATEST" ]]; then
        VERSION="1.0.0"
        print_info "No existing versions found. Using default version: $VERSION"
    else
        VERSION=$(increment_version "$LATEST" "minor")
        print_info "Latest version: v$LATEST"
        print_info "New version: v$VERSION"
    fi
else
    print_info "Using specified version: v$VERSION"
fi

# Check if we're in the correct directory
if [[ ! -f "Makefile" ]] || [[ ! -d "src" ]]; then
    print_error "Must be run from the pdf22png project root directory"
    exit 1
fi

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
    print_warning "You have uncommitted changes. Do you want to continue? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        print_info "Aborting release"
        exit 0
    fi
fi

# Check if tag already exists
if git rev-parse "v$VERSION" >/dev/null 2>&1; then
    print_error "Tag v$VERSION already exists"
    exit 1
fi

# Clean any existing builds
print_info "Cleaning previous builds..."
make clean >/dev/null 2>&1 || true

# Build the project
print_info "Building pdf22png..."
if ! make; then
    print_error "Build failed"
    exit 1
fi
print_success "Build completed"

# Run tests if they exist
if [[ -f "tests/test_pdf22png.m" ]]; then
    print_info "Running tests..."
    if ! make test; then
        print_error "Tests failed"
        exit 1
    fi
    print_success "Tests passed"
fi

# Update version in README if version badge exists
if grep -q "shields.io.*version" README.md 2>/dev/null; then
    print_info "Updating version badge in README..."
    sed -i '' "s/version-v[0-9.]*-/version-v$VERSION-/g" README.md
    git add README.md
fi

# Commit any version changes
if ! git diff-index --quiet HEAD --; then
    print_info "Committing version changes..."
    git commit -m "Release v$VERSION"
fi

# Create and push tag
print_info "Creating tag v$VERSION..."
git tag -a "v$VERSION" -m "Release v$VERSION"

# Push commits and tags
print_info "Pushing to remote..."
if ! git push; then
    print_error "Failed to push commits"
    exit 1
fi

if ! git push origin "v$VERSION"; then
    print_error "Failed to push tag"
    exit 1
fi

print_success "Successfully released v$VERSION"
print_info "GitHub Actions will now build and create the release artifacts"
print_info "Check the Actions tab on GitHub for build progress"
</file>

<file path=".github/workflows/release.yml">
name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: macos-latest
    
    strategy:
      matrix:
        include:
          - name: "macOS Universal"
            arch: "universal"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version $VERSION"
    
    - name: Build Universal Binary
      run: |
        make clean
        make universal
        
    - name: Run Tests
      run: |
        if [ -f "tests/test_pdf22png.m" ]; then
          make test
        fi
    
    - name: Create distribution directory
      run: |
        mkdir -p dist/pdf22png
        cp build/pdf22png dist/pdf22png/
        cp README.md dist/pdf22png/
        cp LICENSE dist/pdf22png/
        
    - name: Create pkg installer
      run: |
        # Create component package
        pkgbuild --root dist/pdf22png \
                 --identifier com.twardoch.pdf22png \
                 --version ${{ steps.version.outputs.VERSION }} \
                 --install-location /usr/local/bin \
                 pdf22png-component.pkg
        
        # Create distribution XML
        cat > distribution.xml << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <installer-gui-script minSpecVersion="2.0">
            <title>pdf22png ${{ steps.version.outputs.VERSION }}</title>
            <pkg-ref id="com.twardoch.pdf22png">
                <bundle-version/>
            </pkg-ref>
            <options customize="never" require-scripts="false" hostArchitectures="x86_64,arm64"/>
            <domains enable_localSystem="true"/>
            <choices-outline>
                <line choice="default">
                    <line choice="com.twardoch.pdf22png"/>
                </line>
            </choices-outline>
            <choice id="default"/>
            <choice id="com.twardoch.pdf22png" visible="false" customLocation="/">
                <pkg-ref id="com.twardoch.pdf22png"/>
            </choice>
            <pkg-ref id="com.twardoch.pdf22png" version="${{ steps.version.outputs.VERSION }}" onConclusion="none">pdf22png-component.pkg</pkg-ref>
        </installer-gui-script>
        EOF
        
        # Build final installer package
        productbuild --distribution distribution.xml \
                     --package-path . \
                     --version ${{ steps.version.outputs.VERSION }} \
                     pdf22png-${{ steps.version.outputs.VERSION }}-universal.pkg
    
    - name: Create DMG
      run: |
        mkdir -p dmg-contents
        cp build/pdf22png dmg-contents/
        cp README.md dmg-contents/
        cp LICENSE dmg-contents/
        
        # Create a simple install script
        cat > dmg-contents/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing pdf22png to /usr/local/bin..."
        sudo cp pdf22png /usr/local/bin/
        sudo chmod +x /usr/local/bin/pdf22png
        echo "Installation complete!"
        EOF
        chmod +x dmg-contents/install.sh
        
        # Create DMG
        hdiutil create -volname "pdf22png ${{ steps.version.outputs.VERSION }}" \
                       -srcfolder dmg-contents \
                       -ov -format UDZO \
                       pdf22png-${{ steps.version.outputs.VERSION }}-universal.dmg
    
    - name: Prepare binary for release
      run: |
        cp build/pdf22png pdf22png-${{ steps.version.outputs.VERSION }}-universal
    
    - name: Generate checksums
      run: |
        shasum -a 256 pdf22png-${{ steps.version.outputs.VERSION }}-universal.pkg > checksums.txt
        shasum -a 256 pdf22png-${{ steps.version.outputs.VERSION }}-universal.dmg >> checksums.txt
        shasum -a 256 pdf22png-${{ steps.version.outputs.VERSION }}-universal >> checksums.txt
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: pdf22png v${{ steps.version.outputs.VERSION }}
        body: |
          # pdf22png v${{ steps.version.outputs.VERSION }}
          
          High-performance PDF to PNG converter for macOS.
          
          ## Installation
          
          ### Option 1: Homebrew
          ```bash
          brew tap twardoch/homebrew-pdf22png
          brew install pdf22png
          ```
          
          ### Option 2: Package Installer
          Download and run `pdf22png-${{ steps.version.outputs.VERSION }}-universal.pkg`
          
          ### Option 3: Manual Installation
          Download `pdf22png-${{ steps.version.outputs.VERSION }}-universal.dmg`, mount it, and run:
          ```bash
          sudo cp /Volumes/pdf22png*/pdf22png /usr/local/bin/
          ```
          
          ## What's New
          See [CHANGELOG.md](https://github.com/twardoch/pdf22png/blob/main/CHANGELOG.md) for details.
          
          ## Checksums
          See `checksums.txt` for SHA-256 checksums of all artifacts.
        draft: false
        prerelease: false
        files: |
          pdf22png-${{ steps.version.outputs.VERSION }}-universal.pkg
          pdf22png-${{ steps.version.outputs.VERSION }}-universal.dmg
          pdf22png-${{ steps.version.outputs.VERSION }}-universal
          checksums.txt
    
    - name: Update Homebrew formula
      run: |
        echo "Homebrew formula update would typically happen here"
        echo "This usually involves updating the formula in the tap repository"
</file>

<file path=".gitignore">
# macOS
.DS_Store
.AppleDouble
.LSOverride
._*
.Spotlight-V100
.Trashes

# Xcode
*.xcworkspace
xcuserdata/
*.xcscmblueprint
*.xccheckout
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

# Build products
build/
*.o
*.a
*.dylib
pdf22png
*.dSYM/

# CMake
CMakeCache.txt
CMakeFiles/
cmake_install.cmake
Makefile.cmake

# Testing
test-results/
coverage/
*.gcov
*.gcda
*.gcno

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~
.cursorindexingignore

# Distribution
dist/
*.tar.gz
*.zip
*.dmg

# Documentation
docs/_build/
*.pdf
</file>

<file path="CLAUDE.md">
# pdf22png

A high-performance command-line tool for converting PDF documents to PNG images on macOS, leveraging native Core Graphics and Quartz frameworks for optimal quality and speed.

## Features

- **Single & Batch Conversion**: Convert individual pages or entire PDF documents
- **Flexible Scaling Options**: 
  - Resolution control (DPI)
  - Percentage scaling
  - Fixed dimensions (width/height fitting)
  - Scale factors
- **Advanced Options**:
  - Transparent background support
  - PNG compression quality control
  - Verbose logging for debugging
- **I/O Flexibility**:
  - Read from files or stdin
  - Write to files, stdout, or batch output directories
  - Customizable output naming patterns
- **Native Performance**: Built with Objective-C using macOS native frameworks
- **Universal Binary**: Supports both Intel and Apple Silicon Macs

## Installation

### Using Homebrew (Recommended)

```bash
brew tap twardoch/homebrew-pdf22png
brew install pdf22png
```

### Building from Source

Requirements:
- macOS 10.15 or later
- Xcode Command Line Tools

```bash
git clone https://github.com/twardoch/pdf22png.git
cd pdf22png
make
sudo make install
```

To build a universal binary for both Intel and Apple Silicon:

```bash
make universal
```

## Usage

### Basic Syntax

```bash
pdf22png [OPTIONS] <input.pdf> [output.png]
```

### Quick Examples

Convert first page of a PDF:
```bash
pdf22png input.pdf output.png
```

Convert a specific page:
```bash
pdf22png -p 5 document.pdf page5.png
```

Convert all pages to individual PNGs:
```bash
pdf22png -a document.pdf
# Creates: document-001.png, document-002.png, etc.
```

Convert at 300 DPI resolution:
```bash
pdf22png -r 300 input.pdf high-res.png
```

Scale to 50% size:
```bash
pdf22png -s 50% input.pdf half-size.png
```

### Options

| Option | Long Form | Description | Default |
|--------|-----------|-------------|---------|
| `-p <n>` | `--page` | Convert specific page number | 1 |
| `-a` | `--all` | Convert all pages | disabled |
| `-r <dpi>` | `--resolution` | Set output DPI (e.g., 300) | 144 |
| `-s <spec>` | `--scale` | Scale specification (see below) | 100% |
| `-t` | `--transparent` | Preserve transparency | disabled |
| `-q <0-9>` | `--quality` | PNG compression quality | 6 |
| `-o <path>` | `--output` | Output file/prefix or `-` for stdout | - |
| `-d <dir>` | `--directory` | Output directory for batch mode | . |
| `-v` | `--verbose` | Enable verbose logging | disabled |
| `-h` | `--help` | Show help message | - |

### Scale Specifications

The `-s/--scale` option accepts various formats:

- **Percentage**: `150%` (1.5x scale)
- **Factor**: `2.0` (2x scale)
- **Fixed width**: `800x` (800px wide, height auto)
- **Fixed height**: `x600` (600px high, width auto)
- **Fit within**: `800x600` (fit within 800x600 box)

### Advanced Examples

Convert with transparent background at 300 DPI:
```bash
pdf22png -t -r 300 input.pdf transparent-300dpi.png
```

Batch convert all pages to a specific directory:
```bash
pdf22png -d ./output_images -o myprefix document.pdf
# Creates: ./output_images/myprefix-001.png, etc.
```

Pipe operations:
```bash
# From stdin to stdout
cat document.pdf | pdf22png - - > output.png

# Process and pipe to ImageMagick
pdf22png -r 300 input.pdf - | convert - -resize 50% final.jpg
```

## Architecture

pdf22png is built using:
- **Objective-C** with ARC (Automatic Reference Counting)
- **Core Graphics** for PDF rendering
- **Quartz** framework for image processing
- **ImageIO** for PNG output
- Native macOS APIs for optimal performance

The codebase is organized into:
- `src/pdf22png.m` - Main program logic and argument parsing
- `src/utils.m` - Utility functions for scaling, rendering, and I/O
- `tests/` - XCTest-based unit tests

## Performance

pdf22png is optimized for performance:
- Parallel processing for batch conversions using Grand Central Dispatch
- Efficient memory management with autoreleasepool usage
- Native Core Graphics rendering for best quality
- Minimal dependencies (only macOS system frameworks)


# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


pdf22png implements specialized PDF to PNG conversion logic leveraging macOS native frameworks. The core business functionality is organized around:

## Core Conversion Engine
The primary conversion logic resides in `src/pdf22png.m`, handling:
- PDF page rendering with customizable scaling
- Transparent background preservation 
- Quality-controlled PNG output generation
- Batch processing with parallel execution

## Scale Specification System
Located in `src/utils.m`, implements specialized scaling algorithms:
- Percentage-based scaling (e.g. "150%")
- Fixed dimension specifications (e.g. "800x600")
- DPI-based resolution control
- Aspect ratio preservation logic

## Output Management
Implements flexible output handling:
- Custom naming pattern generation for batch conversions
- Directory organization for multi-page outputs
- Stream-based processing for pipeline integration
- Transparent vs opaque background handling

## Platform Integration
Native integration with macOS frameworks:
- Core Graphics PDF parsing and rendering
- Quartz image processing pipeline
- Universal binary support for Intel/ARM
- System-level optimization for performance

## Processing Modes
Supports multiple operational modes:
- Single page conversion
- Full document batch processing
- Stream-based pipeline processing
- Interactive command-line interface

The business logic focuses on providing professional-grade PDF to PNG conversion with emphasis on flexibility, quality control, and integration capabilities for automated workflows.

—— When you’re done with a round of updates, update CHANGELOG.md with the changes, remove done things from TODO.md, identify new things that need to be done and add them to TODO.md. Then build the app or run ./release.sh and then continue updates.
</file>

<file path="src/errors.h">
#ifndef PDF22PNG_ERRORS_H
#define PDF22PNG_ERRORS_H

// Error codes for pdf22png
typedef enum {
    PDF22PNG_SUCCESS = 0,
    PDF22PNG_ERROR_GENERAL = 1,
    PDF22PNG_ERROR_INVALID_ARGS = 2,
    PDF22PNG_ERROR_FILE_NOT_FOUND = 3,
    PDF22PNG_ERROR_FILE_READ = 4,
    PDF22PNG_ERROR_FILE_WRITE = 5,
    PDF22PNG_ERROR_NO_INPUT = 6,
    PDF22PNG_ERROR_INVALID_PDF = 7,
    PDF22PNG_ERROR_ENCRYPTED_PDF = 8,
    PDF22PNG_ERROR_EMPTY_PDF = 9,
    PDF22PNG_ERROR_PAGE_NOT_FOUND = 10,
    PDF22PNG_ERROR_RENDER_FAILED = 11,
    PDF22PNG_ERROR_MEMORY = 12,
    PDF22PNG_ERROR_OUTPUT_DIR = 13,
    PDF22PNG_ERROR_INVALID_SCALE = 14,
    PDF22PNG_ERROR_BATCH_FAILED = 15
} PDF22PNGError;

// Error messages
static const char* PDF22PNG_ERROR_MESSAGES[] = {
    "Success",
    "General error",
    "Invalid command line arguments",
    "Input file not found",
    "Failed to read input file",
    "Failed to write output file",
    "No input data received",
    "Invalid PDF document",
    "PDF document is encrypted (password-protected PDFs not supported)",
    "PDF document has no pages",
    "Requested page does not exist",
    "Failed to render PDF page",
    "Memory allocation failed",
    "Failed to create output directory",
    "Invalid scale specification",
    "Batch processing failed"
};

// Function to get error message
static inline const char* pdf22png_error_string(PDF22PNGError error) {
    if (error >= 0 && error <= PDF22PNG_ERROR_BATCH_FAILED) {
        return PDF22PNG_ERROR_MESSAGES[error];
    }
    return "Unknown error";
}

// Macro for error reporting with file and line info
#define PDF22PNG_ERROR(code, ...) do { \
    fprintf(stderr, "Error: %s\n", pdf22png_error_string(code)); \
    if (##__VA_ARGS__) { \
        fprintf(stderr, "Details: "); \
        fprintf(stderr, ##__VA_ARGS__); \
        fprintf(stderr, "\n"); \
    } \
} while(0)

#endif // PDF22PNG_ERRORS_H
</file>

<file path="AGENTS.md">
# pdf22png

A high-performance command-line tool for converting PDF documents to PNG images on macOS, leveraging native Core Graphics and Quartz frameworks for optimal quality and speed.

## Features

- **Single & Batch Conversion**: Convert individual pages or entire PDF documents
- **Flexible Scaling Options**: 
  - Resolution control (DPI)
  - Percentage scaling
  - Fixed dimensions (width/height fitting)
  - Scale factors
- **Advanced Options**:
  - Transparent background support
  - PNG compression quality control
  - Verbose logging for debugging
- **I/O Flexibility**:
  - Read from files or stdin
  - Write to files, stdout, or batch output directories
  - Customizable output naming patterns
- **Native Performance**: Built with Swift using macOS native frameworks
- **Universal Binary**: Supports both Intel and Apple Silicon Macs

## Installation

### Using Homebrew (Recommended)

```bash
brew tap twardoch/homebrew-pdf22png
brew install pdf22png
```

### Building from Source

Requirements:
- macOS 10.15 or later
- Xcode Command Line Tools

```bash
git clone https://github.com/twardoch/pdf22png.git
cd pdf22png
make
sudo make install
```

To build a universal binary for both Intel and Apple Silicon:

```bash
make universal
```

## Usage

### Basic Syntax

```bash
pdf22png [OPTIONS] <input.pdf> [output.png]
```

### Quick Examples

Convert first page of a PDF:
```bash
pdf22png input.pdf output.png
```

Convert a specific page:
```bash
pdf22png -p 5 document.pdf page5.png
```

Convert all pages to individual PNGs:
```bash
pdf22png -a document.pdf
# Creates: document-001.png, document-002.png, etc.
```

Convert at 300 DPI resolution:
```bash
pdf22png -r 300 input.pdf high-res.png
```

Scale to 50% size:
```bash
pdf22png -s 50% input.pdf half-size.png
```

### Options

| Option | Long Form | Description | Default |
|--------|-----------|-------------|---------|
| `-p <n>` | `--page` | Convert specific page number | 1 |
| `-a` | `--all` | Convert all pages | disabled |
| `-r <dpi>` | `--resolution` | Set output DPI (e.g., 300) | 144 |
| `-s <spec>` | `--scale` | Scale specification (see below) | 100% |
| `-t` | `--transparent` | Preserve transparency | disabled |
| `-q <0-9>` | `--quality` | PNG compression quality | 6 |
| `-o <path>` | `--output` | Output file/prefix or `-` for stdout | - |
| `-d <dir>` | `--directory` | Output directory for batch mode | . |
| `-v` | `--verbose` | Enable verbose logging | disabled |
| `-h` | `--help` | Show help message | - |

### Scale Specifications

The `-s/--scale` option accepts various formats:

- **Percentage**: `150%` (1.5x scale)
- **Factor**: `2.0` (2x scale)
- **Fixed width**: `800x` (800px wide, height auto)
- **Fixed height**: `x600` (600px high, width auto)
- **Fit within**: `800x600` (fit within 800x600 box)

### Advanced Examples

Convert with transparent background at 300 DPI:
```bash
pdf22png -t -r 300 input.pdf transparent-300dpi.png
```

Batch convert all pages to a specific directory:
```bash
pdf22png -d ./output_images -o myprefix document.pdf
# Creates: ./output_images/myprefix-001.png, etc.
```

Pipe operations:
```bash
# From stdin to stdout
cat document.pdf | pdf22png - - > output.png

# Process and pipe to ImageMagick
pdf22png -r 300 input.pdf - | convert - -resize 50% final.jpg
```

## Architecture

pdf22png is built using:
- **Swift** using macOS native frameworks
- **Core Graphics** for PDF rendering
- **Vision** framework for OCR capabilities
- **ImageIO** for PNG output
- Native macOS APIs for optimal performance
- **Swift Argument Parser** for command-line interface

The codebase is organized into:
- `Package.swift` - Swift Package Manager manifest
- `Sources/pdf22png/main.swift` - Main program logic, argument parsing, and processing workflows
- `Sources/pdf22png/Models.swift` - Core data structures
- `Sources/pdf22png/Utilities.swift` - Utility functions
- `Tests/pdf22pngTests/` - XCTest-based unit tests written in Swift

## Performance

pdf22png is optimized for performance:
- Parallel processing for batch conversions using Swift Concurrency (TaskGroup)
- Efficient memory management with Swift ARC and value types
- Native Core Graphics rendering for best quality
- Minimal dependencies (only macOS system frameworks and Swift Argument Parser)


# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


pdf22png implements specialized PDF to PNG conversion logic leveraging macOS native frameworks. The core business functionality is organized around:

## Core Conversion Engine
The primary conversion logic resides in `Sources/pdf22png/main.swift` (within the `PDF22PNG` struct and its extensions), handling:
- PDF page rendering with customizable scaling
- Transparent background preservation
- Quality-controlled PNG output generation
- Batch processing with parallel execution using Swift Concurrency

## Scale Specification System
Located in `Sources/pdf22png/Utilities.swift` (e.g., `parseScaleSpecification`, `calculateScaleFactor`) and `Sources/pdf22png/Models.swift` (the `ScaleSpecification` struct), implements specialized scaling algorithms:
- Percentage-based scaling (e.g. "150%")
- Fixed dimension specifications (e.g. "800x600")
- DPI-based resolution control
- Aspect ratio preservation logic

## Output Management
Implements flexible output handling:
- Custom naming pattern generation for batch conversions
- Directory organization for multi-page outputs
- Stream-based processing for pipeline integration
- Transparent vs opaque background handling

## Platform Integration
Native integration with macOS frameworks:
- Core Graphics PDF parsing and rendering
- Quartz image processing pipeline
- Universal binary support for Intel/ARM
- System-level optimization for performance

## Processing Modes
Supports multiple operational modes:
- Single page conversion
- Full document batch processing
- Stream-based pipeline processing
- Interactive command-line interface

The business logic focuses on providing professional-grade PDF to PNG conversion with emphasis on flexibility, quality control, and integration capabilities for automated workflows.

—— When you’re done with a round of updates, update CHANGELOG.md with the changes, remove done things from TODO.md, identify new things that need to be done and add them to TODO.md. Then build the app or run ./release.sh and then continue updates.
</file>

<file path="CHANGELOG.md">
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Changed
- **Complete Rewrite to Swift**: The entire application has been rewritten from Objective-C to modern Swift.
  - Core logic now uses Swift features like `Codable` for options, `async/await` for concurrency (especially in batch mode), and Swift error handling.
  - Build system updated to use Swift Package Manager, managed via the existing Makefile.
  - Command-line argument parsing now uses `swift-argument-parser`.
  - Tests rewritten in Swift using XCTest.
  - Retains compatibility with existing command-line arguments and features.
  - Performance maintained or improved through Swift Concurrency and optimizations.
  - Codebase organization now follows Swift Package Manager conventions (`Sources/`, `Tests/`).

### Added
- File overwrite protection with interactive prompts
  - New `-f/--force` flag to bypass overwrite prompts
  - Interactive confirmation when files would be overwritten
  - Dry-run mode now shows which files would be overwritten
  - Non-interactive mode defaults to not overwriting existing files
- Enhanced error reporting with troubleshooting hints
  - Context-aware error messages provide specific guidance
  - Automatic troubleshooting suggestions based on error type
  - Covers PDF-related, file I/O, memory, scaling, and page range errors
  - Improved user experience with actionable error resolution

### Fixed
- Fixed sign comparison warnings in utils.m (NSInteger vs NSUInteger)
- Replaced XCTest dependency with custom test runner for better compatibility
- Improved test coverage with overwrite protection functionality tests

## [1.1.0] - 2025-06-22

### Added
- Automated release script (`release.sh`) with semantic versioning support
  - Automatic version detection from git tags
  - Minor version auto-increment capability
  - Build verification before tagging
  - Colored output for better readability
- Complete GitHub Actions workflow for automated releases with:
  - Universal binary builds for Intel and Apple Silicon
  - PKG installer generation with proper macOS installer structure
  - DMG disk image creation with install script
  - Automated SHA-256 checksum generation
  - GitHub release creation with all artifacts
- New `-n/--name` flag for including extracted text in output filenames
  - Extracts text directly from PDF pages using Core Graphics
  - Falls back to OCR using Vision framework when no text is found
  - Generates slugified filenames like `prefix-001--extracted-text.png`
  - Maximum 30 characters for text suffix, properly truncated at word boundaries
  - Only available in batch mode for performance reasons
- Page range selection with `-p/--page` option supporting complex ranges
  - Single pages: `-p 5`
  - Ranges: `-p 5-10`
  - Comma-separated lists: `-p 1,3,5-10,15`
  - Works in both single page and batch modes
  - Validates ranges against total page count
- Dry-run mode with `-D/--dry-run` flag
  - Preview all operations without writing any files
  - Shows what files would be created with their dimensions
  - Estimates file sizes based on image dimensions
  - Works with all output modes (file, stdout, batch)
  - Useful for testing command options before actual conversion
- Custom naming patterns with `-P/--pattern` option for batch mode
  - `{basename}` or `{name}` - Input filename without extension
  - `{page}` - Page number with automatic padding
  - `{page:03d}` - Page number with custom padding (e.g., 001, 002)
  - `{text}` - Extracted text from page (requires -n flag)
  - `{date}` - Current date in YYYYMMDD format
  - `{time}` - Current time in HHMMSS format
  - `{total}` - Total page count
  - Example: `'{basename}_p{page:04d}_of_{total}'` → `document_p0001_of_10.png`

### Fixed
- Updated GitHub Actions workflow to use modern actions (replaced deprecated create-release@v1 with softprops/action-gh-release@v1)
- Fixed binary path references throughout release workflow
- Corrected build paths in distribution packaging
- Added @autoreleasepool blocks in renderPDFPageToImage() and batch processing loops to prevent memory buildup
- Fixed memory leaks in error paths by ensuring proper cleanup of Core Graphics resources
- Fixed unused variables warnings (scaleXSet, scaleYSet) in calculateScaleFactor()
- Added PDF validation to check for encrypted PDFs and empty documents before processing
- Created unified error handling system with dedicated errors.h header and standardized error codes
- Implemented partial batch recovery - failed pages are now skipped instead of stopping entire batch
- Added graceful shutdown with signal handlers (SIGINT, SIGTERM) for batch operations
- Added progress reporting for batch operations (shows every 10 pages processed)

### Changed
- Reorganized project structure for better maintainability:
  - Build output now goes to `build/` directory instead of project root
  - Updated Makefile to use dedicated build directory with proper dependencies
  - Modified universal build script to output to `build/` directory
  - Updated all scripts and workflows to reference new build location
- Improved build system with explicit directory creation
- Enhanced clean target to properly remove all build artifacts

### Removed
- Removed old monolithic `pdf22png.m` from root directory (superseded by modular version in `src/`)

### Documentation
- Created comprehensive improvement plan in TODO.md with:
  - Critical stability and memory management fixes
  - High-priority user experience enhancements
  - Performance optimization opportunities
  - Testing infrastructure requirements
  - Code modernization roadmap
  - Security hardening recommendations
  - Phased implementation strategy

## [1.0.0] - 2024-06-23

### Added
- Initial project structure for `pdf22png`.
- Core functionality to convert PDF pages to PNG images.
- Support for:
    - Specific page selection (`-p`).
    - Batch conversion of all pages (`-a`, `-d`).
    - Various scaling methods (`-s`): percentage, factor, width/height fitting.
    - Resolution setting in DPI (`-r`).
    - Transparent backgrounds (`-t`).
    - PNG quality hint (`-q`).
    - Input from file or stdin.
    - Output to file or stdout (single page mode).
    - Customizable output directory and filename prefix for batch mode.
    - Verbose logging (`-v`).
    - Help message (`-h`).
- Makefile for building, testing, installing, and cleaning.
- Basic unit tests for utility functions using XCTest.
- GitHub Actions workflows for CI (build & test) and Releases.
- Homebrew formula template.
- Documentation: README, USAGE, EXAMPLES, API, CHANGELOG, TODO.
- `.gitignore`, `.editorconfig` (to be created).
</file>

<file path="TODO.md">
# pdf22png Improvement Plan

## High Priority

### Phase 1: Memory Management & Stability
-   [ ] Implement memory pressure monitoring to prevent OOM in batch operations

### Phase 2: Error Handling & Recovery
-   [ ] Add file locking to prevent concurrent write conflicts
-   [ ] Implement stdin timeout and size limits

### Phase 5: Performance Optimizations
-   [ ] Make thread pool size configurable (`--threads N`)
-   [ ] Implement page metadata caching during batch operations
-   [ ] Add fast rendering paths for thumbnails/previews
-   [ ] Skip transparency processing for opaque PDFs

### Phase 6: Testing Infrastructure
-   [ ] Create comprehensive test suite:
    -   Integration tests for CLI operations
    -   Rendering tests with visual regression
    -   Performance benchmarks
    -   Error path coverage
-   [ ] Add test PDF collection (various sizes, features, edge cases)
-   [ ] Add GitHub Actions CI for automated testing
-   [ ] Implement code coverage reporting

## Medium Priority

### Phase 3: Code Architecture Refactoring
-   [x] Split monolithic `pdf22png.m` into logical modules: (COMPLETED - Swift rewrite resulted in `main.swift`, `Models.swift`, `Utilities.swift`)
    -   `PDFProcessor` class for PDF operations (Partially done via functions in Utilities/main)
    -   `ImageRenderer` class for rendering operations (Partially done via functions in Utilities/main)
    -   `BatchProcessor` class for batch operations (Partially done via functions in main)
    -   `CLIParser` class for command-line parsing (COMPLETED - `swift-argument-parser` in `main.swift`)
-   [ ] Remove tight coupling with Options struct (ProcessingOptions is better, but still passed around)
-   [ ] Implement proper dependency injection for testability

### Phase 7: Additional Features
-   [ ] Add metadata preservation (copy PDF metadata to PNG)
-   [ ] Implement color space control (`--colorspace sRGB|AdobeRGB|Gray`)
-   [ ] Add encrypted PDF support with password prompt
-   [ ] Support multi-page TIFF output format
-   [ ] Add size estimation before processing
-   [ ] Implement configuration file support (`~/.pdf22pngrc`)
-   [ ] Add JSON output mode for scripting

### Phase 8: Documentation
-   [ ] Create man page for pdf22png(1)
-   [ ] Add inline code documentation (HeaderDoc format)
-   [ ] Write architecture documentation
-   [ ] Create troubleshooting guide
-   [ ] Add performance tuning guide
-   [ ] Document all error codes and solutions

## Low Priority

### Phase 9: Build System Enhancements
-   [ ] Add header dependency tracking in Makefile (N/A for Swift SPM)
-   [x] Create debug/release build configurations (COMPLETED - SPM handles this, Makefile updated)
-   [ ] Implement proper version injection from git tags (Partially done via Makefile, review Swift embedding)
-   [ ] Add static analysis targets (clang-tidy, scan-build) (Consider SwiftLint)
-   [ ] Create CMake build option for cross-platform builds (N/A, macOS only tool)
-   [ ] Add code signing for macOS distribution
-   [ ] Automate .pkg and .dmg creation in Makefile

### Phase 10: Modernization
-   [x] Add nullability annotations throughout codebase (COMPLETED - Swift optionals)
-   [x] Convert to modern property syntax (COMPLETED - Swift syntax)
-   [x] Replace C-style casts with Objective-C casts (COMPLETED - Swift casts)
-   [x] Use blocks instead of function pointers (COMPLETED - Swift closures)
-   [x] Add collection generics (COMPLETED - Swift generics)
-   [x] Implement proper NSError handling (COMPLETED - Swift `Error` protocol)
-   [x] Add async/await support for batch operations (COMPLETED - Swift Concurrency)

### Phase 11: Security Hardening
-   [ ] Sanitize all file paths to prevent injection
-   [ ] Validate output directories against path traversal
-   [ ] Add resource limits for PDF complexity
-   [ ] Use secure temp file creation
-   [ ] Implement sandboxing where possible
-   [ ] Add code signing and notarization

### Phase 12: Static Analysis
-   [ ] Fix all clang-tidy warnings
-   [ ] Address static analyzer issues
-   [ ] Enable strict compiler warnings
-   [ ] Add AddressSanitizer builds
-   [ ] Implement fuzz testing

## Success Metrics
-   [ ] 90%+ test coverage
-   [ ] Zero memory leaks (verified with Instruments)
-   [ ] Batch processing 100+ page PDFs without OOM
-   [ ] Process 1000 pages/minute on M1 Mac
-   [ ] Comprehensive error messages for all failure modes
-   [ ] Full API documentation
-   [ ] Automated release pipeline

## Technical Debt
1. **Consistent style**: Apply clang-format throughout (Consider `swift-format`)
2. **Remove magic numbers**: Define all constants
3. **Audit TODO/FIXME comments**: Address or remove

## Completed Features ✅
- **Phase 0**: Text extraction with OCR fallback (`-n/--name`)
- **Phase 0**: Page range selection (`-p 1-5,10,15-20`)
- **Phase 0**: Dry-run mode (`-D/--dry-run`)
- **Phase 0**: Custom naming patterns (`-P/--pattern`)
- **Phase 1**: Memory management improvements (@autoreleasepool blocks)
- **Phase 1**: Memory leak fixes in error paths
- **Phase 1**: Graceful shutdown with signal handlers
- **Phase 2**: Unified error handling system with error codes
- **Phase 2**: Partial batch recovery (skip failed pages)
- **Phase 2**: PDF validation (encrypted, empty documents)
- **Phase 4**: Overwrite protection with interactive prompts (`-f/--force`)
- **Phase 4**: Enhanced error messages with troubleshooting hints
- **Phase 6**: Custom test runner (replaced XCTest dependency)
- **Phase 6**: Basic unit tests for utility functions

## Development Guidelines
-   DO NOT maintain backward compatibility for existing CLI usage
-   Prioritize stability over new features
-   Keep macOS-ONLY approach, do not plan portability
-   Focus on user experience and reliability
-   Maintain comprehensive test coverage for new features
</file>

<file path="Makefile">
# Variables
PRODUCT_NAME = pdf22png
CC = clang
CFLAGS = -Wall -Wextra -O2 -fobjc-arc -mmacosx-version-min=10.15
LDFLAGS = -framework Foundation -framework CoreGraphics -framework AppKit -framework Vision
PREFIX = /usr/local
BINDIR = $(PREFIX)/bin
SRCDIR = src
TESTDIR = tests
BUILDDIR = build
VERSION = $(shell git describe --tags --always --dirty)

# Source files
SOURCES = $(SRCDIR)/pdf22png.m $(SRCDIR)/utils.m
OBJECTS = $(SOURCES:.m=.o)
TEST_SOURCES = $(TESTDIR)/test_runner.m
TEST_OBJECTS = $(TEST_SOURCES:.m=.o)

# Targets
.PHONY: all clean install uninstall test universal release fmt lint

all: $(BUILDDIR)/$(PRODUCT_NAME)

$(BUILDDIR)/$(PRODUCT_NAME): $(OBJECTS) | $(BUILDDIR)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^

$(BUILDDIR):
	@mkdir -p $(BUILDDIR)

%.o: %.m
	$(CC) $(CFLAGS) -c -o $@ $<

# Universal binary for Intel and Apple Silicon
universal:
	@echo "Building universal binary..."
	@scripts/build-universal.sh

install: $(BUILDDIR)/$(PRODUCT_NAME)
	@echo "Installing $(PRODUCT_NAME) to $(BINDIR)..."
	@install -d $(BINDIR)
	@install -m 755 $(BUILDDIR)/$(PRODUCT_NAME) $(BINDIR)/
	@echo "Installation complete!"

uninstall:
	@echo "Uninstalling $(PRODUCT_NAME)..."
	@rm -f $(BINDIR)/$(PRODUCT_NAME)
	@echo "Uninstallation complete!"

test: $(BUILDDIR)/$(PRODUCT_NAME) $(TEST_OBJECTS)
	@echo "Running tests..."
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $(BUILDDIR)/test_runner $(TEST_OBJECTS) $(filter-out $(SRCDIR)/pdf22png.o,$(OBJECTS))
	@$(BUILDDIR)/test_runner

clean:
	@rm -f $(OBJECTS) $(TEST_OBJECTS)
	@rm -rf $(BUILDDIR) *.dSYM
	@echo "Clean complete!"

fmt:
	@echo "Formatting code..."
	@clang-format -i $(SRCDIR)/*.m $(SRCDIR)/*.h $(TESTDIR)/*.m

lint:
	@echo "Linting code..."
	@oclint $(SOURCES) -- $(CFLAGS)

# Release build with version info
release:
	$(MAKE) clean
	$(MAKE) CFLAGS="$(CFLAGS) -DVERSION=\\"$(VERSION)\\""
	@echo "Release build complete: $(VERSION)"
</file>

<file path="src/pdf22png.h">
#import <Foundation/Foundation.h>
#import <Quartz/Quartz.h>
#import <ImageIO/ImageIO.h>
#import "errors.h"

// Structures from pdf22png.m
typedef struct {
    CGFloat scaleFactor;
    CGFloat maxWidth;
    CGFloat maxHeight;
    CGFloat dpi;
    BOOL isPercentage;
    BOOL isDPI;
    BOOL hasWidth;
    BOOL hasHeight;
} ScaleSpec;

typedef struct {
    ScaleSpec scale;
    NSInteger pageNumber;
    NSString *inputPath;
    NSString *outputPath;
    NSString *outputDirectory;
    BOOL batchMode;
    // Recommended additions for new features from README
    BOOL transparentBackground;
    int pngQuality; // 0-9
    BOOL verbose;
    BOOL includeText; // Include extracted text in filename
    NSString *pageRange; // Page range specification (e.g., "1-5,10,15-20")
    BOOL dryRun; // Preview operations without writing files
    NSString *namingPattern; // Custom naming pattern with placeholders
    BOOL forceOverwrite; // Force overwrite without prompting
} Options;

// Function prototypes from pdf22png.m that should remain in main logic
void printUsage(const char *programName);
Options parseArguments(int argc, const char *argv[]);
BOOL processSinglePage(CGPDFDocumentRef pdfDocument, Options *options);
BOOL processBatchMode(CGPDFDocumentRef pdfDocument, Options *options);

// Potentially new functions based on README advanced options
// These would be implemented in pdf22png.m
// void handleTransparency(CGContextRef context, Options* options); // Example if needed
// void setPNGCompression(CGImageDestinationRef dest, Options* options); // Example if needed

// Main function declaration (though it's standard)
int main(int argc, const char *argv[]);
</file>

<file path="src/pdf22png.m">
#import "pdf22png.h"
#import "utils.h"
#import <getopt.h>
#import <signal.h>

// Global variable for signal handling
static volatile sig_atomic_t g_shouldTerminate = 0;

// Signal handler for graceful shutdown
void signalHandler(int sig) {
    g_shouldTerminate = 1;
    fprintf(stderr, "\nReceived signal %d, finishing current operations...\n", sig);
}

// Define long options for getopt_long
static struct option long_options[] = {
    {"page", required_argument, 0, 'p'},
    {"all", no_argument, 0, 'a'}, // New: for batch mode without needing -d
    {"resolution", required_argument, 0, 'r'}, // Maps to -s Ndpi
    {"scale", required_argument, 0, 's'},
    {"transparent", no_argument, 0, 't'},
    {"quality", required_argument, 0, 'q'},
    {"verbose", no_argument, 0, 'v'},
    {"name", no_argument, 0, 'n'}, // Include text in filename
    {"pattern", required_argument, 0, 'P'}, // Custom naming pattern
    {"dry-run", no_argument, 0, 'D'}, // Preview operations without writing
    {"force", no_argument, 0, 'f'}, // Force overwrite without prompting
    {"help", no_argument, 0, 'h'},
    {"output", required_argument, 0, 'o'}, // For consistency with other tools
    {"directory", required_argument, 0, 'd'}, // For batch output directory
    {0, 0, 0, 0}
};

void printUsage(const char *programName) {
    fprintf(stderr, "Usage: %s [OPTIONS] <input.pdf> [output.png | output_%%03d.png]\n", programName);
    fprintf(stderr, "Converts PDF documents to PNG images.\n\n");
    fprintf(stderr, "Options:\n");
    fprintf(stderr, "  -p, --page <spec>       Page(s) to convert. Single page, range, or comma-separated.\n");
    fprintf(stderr, "                          Examples: 1 | 1-5 | 1,3,5-10 (default: 1)\n");
    fprintf(stderr, "                          In batch mode, only specified pages are converted.\n");
    fprintf(stderr, "  -a, --all               Convert all pages. If -d is not given, uses input filename as prefix.\n");
    fprintf(stderr, "                          Output files named <prefix>-<page_num>.png.\n");
    fprintf(stderr, "  -r, --resolution <dpi>  Set output DPI (e.g., 150dpi). Overrides -s if both used with numbers.\n");
    fprintf(stderr, "  -s, --scale <spec>      Scaling specification (default: 100%% or 1.0).\n");
    fprintf(stderr, "                            NNN%%: percentage (e.g., 150%%)\n");
    fprintf(stderr, "                            N.N:  scale factor (e.g., 1.5)\n");
    fprintf(stderr, "                            WxH:  fit to WxH pixels (e.g., 800x600)\n");
    fprintf(stderr, "                            Wx:   fit to width W pixels (e.g., 1024x)\n");
    fprintf(stderr, "                            xH:   fit to height H pixels (e.g., x768)\n");
    // fprintf(stderr, "                            Ndpi: dots per inch (e.g., 300dpi) - use -r for this\n");
    fprintf(stderr, "  -t, --transparent       Preserve transparency (default: white background).\n");
    fprintf(stderr, "  -q, --quality <n>       PNG compression quality (0-9, default: 6). Currently informational.\n");
    fprintf(stderr, "  -o, --output <path>     Output PNG file or prefix for batch mode.\n");
    fprintf(stderr, "                          If '-', output to stdout (single page mode only).\n");
    fprintf(stderr, "  -d, --directory <dir>   Output directory for batch mode (converts all pages).\n");
    fprintf(stderr, "                          If used, -o specifies filename prefix inside this directory.\n");
    fprintf(stderr, "  -v, --verbose           Verbose output.\n");
    fprintf(stderr, "  -n, --name              Include extracted text in output filename (batch mode only).\n");
    fprintf(stderr, "  -P, --pattern <pat>     Custom naming pattern for batch mode. Placeholders:\n");
    fprintf(stderr, "                          {basename} - Input filename without extension\n");
    fprintf(stderr, "                          {page} - Page number (auto-padded)\n");
    fprintf(stderr, "                          {page:03d} - Page with custom padding\n");
    fprintf(stderr, "                          {text} - Extracted text (requires -n)\n");
    fprintf(stderr, "                          {date} - Current date (YYYYMMDD)\n");
    fprintf(stderr, "                          {time} - Current time (HHMMSS)\n");
    fprintf(stderr, "                          {total} - Total page count\n");
    fprintf(stderr, "                          Example: '{basename}_p{page:04d}_of_{total}'\n");
    fprintf(stderr, "  -D, --dry-run           Preview operations without writing files.\n");
    fprintf(stderr, "  -f, --force             Force overwrite existing files without prompting.\n");
    fprintf(stderr, "  -h, --help              Show this help message and exit.\n\n");
    fprintf(stderr, "Arguments:\n");
    fprintf(stderr, "  <input.pdf>             Input PDF file. If '-', reads from stdin.\n");
    fprintf(stderr, "  [output.png]            Output PNG file. Required if not using -o or -d.\n");
    fprintf(stderr, "                          If input is stdin and output is not specified, output goes to stdout.\n");
    fprintf(stderr, "                          In batch mode (-a or -d), this is used as a prefix if -o is not set.\n");
}

Options parseArguments(int argc, const char *argv[]) {
    Options options = {
        .scale = {.scaleFactor = 1.0, .isPercentage = YES, .dpi = 144}, // Default DPI is 144 from README
        .pageNumber = 1,
        .inputPath = nil,
        .outputPath = nil,
        .outputDirectory = nil,
        .batchMode = NO,
        .transparentBackground = NO,
        .pngQuality = 6, // Default PNG quality
        .verbose = NO,
        .includeText = NO,
        .pageRange = nil,
        .dryRun = NO,
        .namingPattern = nil,
        .forceOverwrite = NO
    };

    int opt;
    int option_index = 0;
    BOOL scale_explicitly_set = NO;
    BOOL resolution_explicitly_set = NO;

    // Suppress getopt's default error messages
    // opterr = 0;

    while ((opt = getopt_long(argc, (char *const *)argv, "p:ar:s:tq:o:d:vnP:Dfh", long_options, &option_index)) != -1) {
        switch (opt) {
            case 'p': {
                options.pageRange = [NSString stringWithUTF8String:optarg];
                // For single page mode compatibility, try to parse as simple number
                NSScanner *scanner = [NSScanner scannerWithString:options.pageRange];
                NSInteger singlePage;
                if ([scanner scanInteger:&singlePage] && [scanner isAtEnd]) {
                    options.pageNumber = singlePage;
                    if (options.pageNumber < 1) {
                        fprintf(stderr, "Error: Invalid page number: %s. Must be >= 1.\n", optarg);
                        exit(1);
                    }
                } else {
                    // It's a range or list, will be parsed later
                    options.pageNumber = 0; // Indicates range mode
                }
                break;
            }
            case 'a':
                options.batchMode = YES;
                break;
            case 'r': {
                NSString* resStr = [NSString stringWithUTF8String:optarg];
                if (![resStr hasSuffix:@"dpi"]) { // Ensure it's passed as Ndpi, or assume dpi
                    resStr = [resStr stringByAppendingString:@"dpi"];
                }
                if (!parseScaleSpec([resStr UTF8String], &options.scale)) {
                    fprintf(stderr, "Error: Invalid resolution specification: %s\n", optarg);
                    printUsage(argv[0]);
                    exit(1);
                }
                resolution_explicitly_set = YES;
                break;
            }
            case 's':
                if (!parseScaleSpec(optarg, &options.scale)) {
                    reportError([NSString stringWithFormat:@"Invalid scale specification: %s", optarg],
                               getTroubleshootingHint(@"scale format"));
                    printUsage(argv[0]);
                    exit(1);
                }
                scale_explicitly_set = YES;
                break;
            case 't':
                options.transparentBackground = YES;
                break;
            case 'q':
                options.pngQuality = atoi(optarg);
                if (options.pngQuality < 0 || options.pngQuality > 9) {
                    fprintf(stderr, "Error: Invalid PNG quality: %s. Must be between 0 and 9.\n", optarg);
                    exit(1);
                }
                break;
            case 'o':
                options.outputPath = [NSString stringWithUTF8String:optarg];
                break;
            case 'd':
                options.outputDirectory = [NSString stringWithUTF8String:optarg];
                options.batchMode = YES; // -d implies batch mode
                break;
            case 'v':
                options.verbose = YES;
                break;
            case 'n':
                options.includeText = YES;
                break;
            case 'P':
                options.namingPattern = [NSString stringWithUTF8String:optarg];
                break;
            case 'D':
                options.dryRun = YES;
                break;
            case 'f':
                options.forceOverwrite = YES;
                break;
            case 'h':
                printUsage(argv[0]);
                exit(0);
            case '?': // Unknown option or missing argument
                // getopt_long already prints an error message if opterr is not 0
                // fprintf(stderr, "Error: Unknown option or missing argument.\n");
                printUsage(argv[0]);
                exit(1);
            default:
                // Should not happen
                abort();
        }
    }

    logMessage(options.verbose, @"Finished parsing options.");

    // Handle conflicting scale/resolution. Resolution (-r) takes precedence.
    if (resolution_explicitly_set && scale_explicitly_set && !options.scale.isDPI) {
        // If -r was set, options.scale is already DPI based.
        // If -s was also set but not as DPI, -r (DPI) wins.
        // If -s was also set as DPI, the last one parsed wins, which is fine.
        logMessage(options.verbose, @"Both -r (resolution) and -s (scale) were specified. Using resolution (-r %fdpi).", options.scale.dpi);
    } else if (!resolution_explicitly_set && !scale_explicitly_set) {
        // Neither -r nor -s set, use default DPI of 144
        logMessage(options.verbose, @"No scale or resolution specified, using default %fdpi.", options.scale.dpi);
        // Ensure scale is set to DPI based for default
        char defaultDpiStr[16];
        snprintf(defaultDpiStr, sizeof(defaultDpiStr), "%ddpi", (int)options.scale.dpi);
        parseScaleSpec(defaultDpiStr, &options.scale);
    }


    // Handle positional arguments (input and output files)
    int num_remaining_args = argc - optind;
    logMessage(options.verbose, @"Number of remaining arguments: %d", num_remaining_args);

    if (num_remaining_args == 0 && isatty(fileno(stdin))) {
         fprintf(stderr, "Error: Input PDF file required, or pipe from stdin.\n");
         printUsage(argv[0]);
         exit(1);
    }

    // Input file
    if (num_remaining_args > 0) {
        NSString* first_arg = [NSString stringWithUTF8String:argv[optind]];
        if ([first_arg isEqualToString:@"-"]) {
            options.inputPath = nil; // stdin
            logMessage(options.verbose, @"Input PDF: stdin");
        } else {
            options.inputPath = first_arg;
            logMessage(options.verbose, @"Input PDF: %@", options.inputPath);
        }
        optind++;
        num_remaining_args--;
    } else { // No positional args, input must be stdin
        options.inputPath = nil; // stdin
        logMessage(options.verbose, @"Input PDF: stdin (implied)");
    }


    // Output file / prefix
    if (options.outputPath == nil) { // if -o was not used
        if (num_remaining_args > 0) {
            options.outputPath = [NSString stringWithUTF8String:argv[optind]];
            logMessage(options.verbose, @"Output path (from argument): %@", options.outputPath);
            optind++;
            num_remaining_args--;
        } else {
            // No -o and no second positional argument
            if (options.inputPath == nil && !options.batchMode) { // Input is stdin, not batch mode
                options.outputPath = @"-"; // Default to stdout
                logMessage(options.verbose, @"Output path: stdout (implied for stdin input)");
            } else if (options.batchMode && options.outputDirectory == nil) {
                // Batch mode, no -d, no -o, no output arg. Use input filename as prefix.
                // This case is handled by getOutputPrefix if options.outputPath is nil.
                logMessage(options.verbose, @"Batch mode: Output prefix will be derived from input filename or default to 'page'.");
            } else if (!options.batchMode && options.inputPath != nil) {
                 fprintf(stderr, "Error: Output PNG file required when input is a file and not in batch mode.\n");
                 printUsage(argv[0]);
                 exit(1);
            }
        }
    } else {
        logMessage(options.verbose, @"Output path (from -o): %@", options.outputPath);
    }

    if (num_remaining_args > 0) {
        fprintf(stderr, "Error: Too many arguments.\n");
        printUsage(argv[0]);
        exit(1);
    }

    // Final checks for batch mode
    if (options.batchMode) {
        if ([options.outputPath isEqualToString:@"-"]) {
            fprintf(stderr, "Error: Cannot output to stdout in batch mode.\n");
            exit(1);
        }
        if (options.outputDirectory == nil) {
            // If -d is not specified, output to current directory
            options.outputDirectory = @".";
            logMessage(options.verbose, @"Batch mode: Output directory not specified, using current directory '.'");
        }
        // If outputPath was not set by -o or positional arg, getOutputPrefix will use input name or "page"
        // If outputPath was set, it's the prefix.
    } else { // Single page mode
        if (options.outputDirectory != nil) {
            fprintf(stderr, "Error: -d/--directory is only for batch mode (-a/--all).\n");
            exit(1);
        }
    }

    logMessage(options.verbose, @"Final Options: pageNumber=%ld, batchMode=%s, transparent=%s, quality=%d, verbose=%s",
        (long)options.pageNumber, options.batchMode?"YES":"NO",
        options.transparentBackground?"YES":"NO", options.pngQuality, options.verbose?"YES":"NO");
    logMessage(options.verbose, @"ScaleSpec: factor=%.2f, dpi=%.2f, w=%.0f, h=%.0f, %%=%s, dpi_set=%s, w_set=%s, h_set=%s",
        options.scale.scaleFactor, options.scale.dpi, options.scale.maxWidth, options.scale.maxHeight,
        options.scale.isPercentage?"YES":"NO", options.scale.isDPI?"YES":"NO",
        options.scale.hasWidth?"YES":"NO", options.scale.hasHeight?"YES":"NO");


    return options;
}


BOOL processSinglePage(CGPDFDocumentRef pdfDocument, Options *options) {
    @autoreleasepool {
        logMessage(options->verbose, @"Processing single page: %ld", (long)options->pageNumber);

        size_t pageCount = CGPDFDocumentGetNumberOfPages(pdfDocument);
        if (options->pageNumber < 1 || options->pageNumber > (NSInteger)pageCount) {
            fprintf(stderr, "Error: Page %ld does not exist (document has %zu pages).\n",
                    (long)options->pageNumber, pageCount);
            return NO;
        }

        CGPDFPageRef pdfPage = CGPDFDocumentGetPage(pdfDocument, options->pageNumber);
        if (!pdfPage) {
            fprintf(stderr, "Error: Failed to get page %ld.\n", (long)options->pageNumber);
            return NO;
        }

        CGRect pageRect = CGPDFPageGetBoxRect(pdfPage, kCGPDFMediaBox);
        CGFloat scaleFactor = calculateScaleFactor(&options->scale, pageRect);
        logMessage(options->verbose, @"Calculated scale factor for page %ld: %.2f", (long)options->pageNumber, scaleFactor);

        CGImageRef image = renderPDFPageToImage(pdfPage, scaleFactor, options->transparentBackground, options->verbose);
        if (!image) {
            fprintf(stderr, "Error: Failed to render PDF page %ld.\n", (long)options->pageNumber);
            return NO;
        }

        BOOL success;
        if (options->outputPath && [options->outputPath isEqualToString:@"-"]) {
            if (options->dryRun) {
                size_t width = CGImageGetWidth(image);
                size_t height = CGImageGetHeight(image);
                fprintf(stdout, "[DRY-RUN] Would write PNG to stdout\n");
                fprintf(stdout, "          Page: %ld, Dimensions: %zux%zu\n", (long)options->pageNumber, width, height);
                success = YES;
            } else {
                logMessage(options->verbose, @"Writing image to stdout.");
                NSFileHandle *stdoutHandle = [NSFileHandle fileHandleWithStandardOutput];
                success = writeImageAsPNG(image, stdoutHandle, options->pngQuality, options->verbose);
            }
        } else if (options->outputPath) {
            logMessage(options->verbose, @"Writing image to file: %@", options->outputPath);
            success = writeImageToFile(image, options->outputPath, options->pngQuality, options->verbose, options->dryRun, options->forceOverwrite);
        } else {
            // This case should ideally be caught by argument parsing, means no output specified
            fprintf(stderr, "Error: Output path not specified for single page mode.\n");
            success = NO;
        }

        CGImageRelease(image);
        return success;
    }
}

BOOL processBatchMode(CGPDFDocumentRef pdfDocument, Options *options) {
    logMessage(options->verbose, @"Processing in batch mode. Output directory: %@", options->outputDirectory);

    if (options->dryRun) {
        fprintf(stdout, "[DRY-RUN] Would create directory: %s\n", [options->outputDirectory UTF8String]);
    } else {
        NSFileManager *fileManager = [NSFileManager defaultManager];
        NSError *error = nil;
        if (![fileManager createDirectoryAtPath:options->outputDirectory
                    withIntermediateDirectories:YES
                                     attributes:nil
                                          error:&error]) {
            fprintf(stderr, "Error: Failed to create output directory '%s': %s\n",
                    [options->outputDirectory UTF8String],
                    [[error localizedDescription] UTF8String]);
            return NO;
        }
    }

    size_t totalPageCount = CGPDFDocumentGetNumberOfPages(pdfDocument);
    NSString *prefix = getOutputPrefix(options); // Handles nil outputPath for prefix generation
    logMessage(options->verbose, @"Using output prefix: %@", prefix);

    // Determine which pages to process
    NSArray<NSNumber *> *pagesToProcess;
    if (options->pageRange) {
        pagesToProcess = parsePageRange(options->pageRange, totalPageCount);
        if (!pagesToProcess || pagesToProcess.count == 0) {
            reportError([NSString stringWithFormat:@"Invalid page range specification: %@", options->pageRange],
                       getTroubleshootingHint(@"page range"));
            return NO;
        }
        logMessage(options->verbose, @"Processing %lu pages from range: %@",
                   (unsigned long)pagesToProcess.count, options->pageRange);
    } else {
        // Process all pages
        NSMutableArray *allPages = [NSMutableArray arrayWithCapacity:totalPageCount];
        for (size_t i = 1; i <= totalPageCount; i++) {
            [allPages addObject:@(i)];
        }
        pagesToProcess = allPages;
        logMessage(options->verbose, @"Processing all %zu pages", totalPageCount);
    }

    __block volatile NSInteger successCount = 0;
    __block volatile NSInteger failCount = 0;
    __block volatile NSInteger processedCount = 0;
    NSObject *lock = [[NSObject alloc] init]; // For thread-safe modification of counters

    logMessage(options->verbose, @"Starting batch conversion of %lu pages...",
               (unsigned long)pagesToProcess.count);

    dispatch_apply(pagesToProcess.count, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^(size_t i) {
        // Check for termination signal
        if (g_shouldTerminate) {
            return;
        }

        // Continue processing even if other pages fail
        size_t pageNum = [pagesToProcess[i] unsignedIntegerValue];
        logMessage(options->verbose, @"Starting processing for page %zu...", pageNum);

        @autoreleasepool {
            CGPDFPageRef pdfPage = CGPDFDocumentGetPage(pdfDocument, pageNum);
            if (!pdfPage) {
                fprintf(stderr, "Warning: Failed to get page %zu, skipping.\n", pageNum);
                @synchronized(lock) {
                    failCount++;
                    processedCount++;
                }
                return;
            }

            CGRect pageRect = CGPDFPageGetBoxRect(pdfPage, kCGPDFMediaBox);
            CGFloat scaleFactor = calculateScaleFactor(&options->scale, pageRect);
            logMessage(options->verbose, @"Calculated scale factor for page %zu: %.2f", pageNum, scaleFactor);

            CGImageRef image = renderPDFPageToImage(pdfPage, scaleFactor, options->transparentBackground, options->verbose);
            if (!image) {
                fprintf(stderr, "Warning: Failed to render page %zu, skipping.\n", pageNum);
                @synchronized(lock) {
                    failCount++;
                    processedCount++;
                }
                return;
            }

            NSString *filename;
            NSString *extractedText = nil;

            // Extract text if needed (for -n flag or {text} placeholder)
            if (options->includeText || (options->namingPattern && [options->namingPattern containsString:@"{text}"])) {
                // Extract text from PDF page first
                NSString *pageText = extractTextFromPDFPage(pdfPage);

                // If no text found, try OCR
                if (!pageText || pageText.length == 0) {
                    logMessage(options->verbose, @"No text extracted from PDF, attempting OCR for page %zu", pageNum);
                    pageText = performOCROnImage(image);
                }

                // Slugify the text if found
                if (pageText && pageText.length > 0) {
                    extractedText = slugifyText(pageText, 30);
                    logMessage(options->verbose, @"Extracted text for page %zu: %@", pageNum, extractedText);
                } else {
                    logMessage(options->verbose, @"No text found for page %zu", pageNum);
                }
            }

            // Generate filename using pattern or default format
            if (options->namingPattern) {
                filename = formatFilenameWithPattern(options->namingPattern, prefix, pageNum, totalPageCount, extractedText);
                filename = [filename stringByAppendingString:@".png"];
            } else {
                filename = formatFilenameWithPattern(nil, prefix, pageNum, totalPageCount,
                                                   options->includeText ? extractedText : nil);
                filename = [filename stringByAppendingString:@".png"];
            }

            NSString *outputPath = [options->outputDirectory stringByAppendingPathComponent:filename];
            logMessage(options->verbose, @"Writing image for page %zu to file: %@", pageNum, outputPath);

            if (!writeImageToFile(image, outputPath, options->pngQuality, options->verbose, options->dryRun, options->forceOverwrite)) {
                fprintf(stderr, "Warning: Failed to write page %zu to '%s', skipping.\n", pageNum, [outputPath UTF8String]);
                @synchronized(lock) {
                    failCount++;
                    processedCount++;
                }
            } else {
                @synchronized(lock) {
                    successCount++;
                    processedCount++;
                }
            }

            CGImageRelease(image);

            // Progress reporting
            @synchronized(lock) {
                if (!options->verbose && processedCount % 10 == 0) {
                    fprintf(stderr, "\rProgress: %ld/%lu pages processed",
                            (long)processedCount, (unsigned long)pagesToProcess.count);
                    fflush(stderr);
                }
            }

            logMessage(options->verbose, @"Finished processing for page %zu.", pageNum);
        }
    });

    // Clear progress line if not in verbose mode
    if (!options->verbose) {
        fprintf(stderr, "\r%*s\r", 50, ""); // Clear the progress line
    }

    // Report results
    if (options->dryRun) {
        fprintf(stdout, "\n[DRY-RUN] Would convert %lu pages to PNG files\n",
                (unsigned long)pagesToProcess.count);
    } else if (g_shouldTerminate) {
        fprintf(stderr, "Batch processing interrupted: %ld pages converted before interruption, %ld pages failed.\n",
                (long)successCount, (long)failCount);
    } else {
        fprintf(stderr, "Batch processing complete: %ld pages converted successfully, %ld pages failed.\n",
                (long)successCount, (long)failCount);
    }

    // Return success only if at least one page was converted
    return successCount > 0;
}

int main(int argc, const char *argv[]) {
    @autoreleasepool {
        // Install signal handlers
        signal(SIGINT, signalHandler);
        signal(SIGTERM, signalHandler);

        Options options = parseArguments(argc, argv);

        logMessage(options.verbose, @"Starting pdf22png tool.");

        NSData *pdfData = readPDFData(options.inputPath, options.verbose);
        if (!pdfData || [pdfData length] == 0) {
            fprintf(stderr, "Error: No PDF data received or PDF data is empty.\n");
            return 1;
        }

        CGDataProviderRef provider = CGDataProviderCreateWithCFData((__bridge CFDataRef)pdfData);
        if (!provider) {
            fprintf(stderr, "Error: Failed to create PDF data provider.\n");
            return 1;
        }
        CGPDFDocumentRef pdfDocument = CGPDFDocumentCreateWithProvider(provider);
        CGDataProviderRelease(provider);

        if (!pdfDocument) {
            fprintf(stderr, "Error: Failed to create PDF document. Ensure the input is a valid PDF.\n");
            return 1;
        }

        // Validate PDF document
        if (CGPDFDocumentIsEncrypted(pdfDocument)) {
            reportError(@"PDF document is encrypted. Password-protected PDFs are not currently supported.",
                       getTroubleshootingHint(@"pdf encrypted password"));
            CGPDFDocumentRelease(pdfDocument);
            return 1;
        }

        size_t pageCount = CGPDFDocumentGetNumberOfPages(pdfDocument);
        if (pageCount == 0) {
            reportError(@"PDF document has no pages.",
                       getTroubleshootingHint(@"pdf empty no pages"));
            CGPDFDocumentRelease(pdfDocument);
            return 1;
        }

        logMessage(options.verbose, @"PDF document loaded successfully. Total pages: %zu", pageCount);

        BOOL success;
        if (options.batchMode) {
            success = processBatchMode(pdfDocument, &options);
        } else {
            success = processSinglePage(pdfDocument, &options);
        }

        CGPDFDocumentRelease(pdfDocument);
        logMessage(options.verbose, @"Processing finished. Success: %s", success ? "YES" : "NO");

        return success ? 0 : 1;
    }
}
</file>

<file path="src/utils.h">
#ifndef UTILS_H
#define UTILS_H

#import <Foundation/Foundation.h>
#import <Quartz/Quartz.h>
#import "pdf22png.h" // For ScaleSpec and Options structs
#import "errors.h" // For error codes and handling

// Function prototypes for utility functions
BOOL parseScaleSpec(const char *spec, ScaleSpec *scale);
NSData *readDataFromStdin(void);
NSData *readPDFData(NSString *inputPath, BOOL verbose); // Added verbose
CGFloat calculateScaleFactor(ScaleSpec *scale, CGRect pageRect);
CGImageRef renderPDFPageToImage(CGPDFPageRef pdfPage, CGFloat scaleFactor, BOOL transparentBackground, BOOL verbose); // Added transparentBackground and verbose
BOOL writeImageAsPNG(CGImageRef image, NSFileHandle *output, int pngQuality, BOOL verbose); // Added pngQuality and verbose
BOOL writeImageToFile(CGImageRef image, NSString *outputPath, int pngQuality, BOOL verbose, BOOL dryRun, BOOL forceOverwrite); // Added pngQuality, verbose, dryRun and forceOverwrite
NSString *getOutputPrefix(Options *options);
void logMessage(BOOL verbose, NSString *format, ...);

// Text extraction and processing
NSString *extractTextFromPDFPage(CGPDFPageRef page);
NSString *performOCROnImage(CGImageRef image);
NSString *slugifyText(NSString *text, NSUInteger maxLength);

// Page range parsing
NSArray<NSNumber *> *parsePageRange(NSString *rangeSpec, NSUInteger totalPages);

// Naming pattern processing
NSString *formatFilenameWithPattern(NSString *pattern, NSString *basename, NSUInteger pageNum,
                                   NSUInteger totalPages, NSString *extractedText);

// File overwrite protection
BOOL fileExists(NSString *path);
BOOL shouldOverwriteFile(NSString *path, BOOL interactive);
BOOL promptUserForOverwrite(NSString *path);

// Enhanced error reporting
void reportError(NSString *message, NSString *troubleshootingHint);
void reportWarning(NSString *message, NSString *troubleshootingHint);
NSString *getTroubleshootingHint(NSString *errorContext);

#endif /* UTILS_H */
</file>

<file path="src/utils.m">
#import "utils.h"
#import <Vision/Vision.h>

void logMessage(BOOL verbose, NSString *format, ...) {
    if (verbose) {
        va_list args;
        va_start(args, format);
        NSString *message = [[NSString alloc] initWithFormat:format arguments:args];
        va_end(args);
        fprintf(stderr, "%s\n", [message UTF8String]);
    }
}

BOOL parseScaleSpec(const char *spec, ScaleSpec *scale) {
    if (!spec || !scale) return NO;

    // Initialize scale
    memset(scale, 0, sizeof(ScaleSpec));
    scale->scaleFactor = 1.0; // Default to 100% if not specified otherwise

    NSString *specStr = [NSString stringWithUTF8String:spec];

    // Check for percentage (NNN%)
    if ([specStr hasSuffix:@"%"]) {
        NSString *numStr = [specStr substringToIndex:[specStr length] - 1];
        scale->scaleFactor = [numStr doubleValue] / 100.0;
        scale->isPercentage = YES;
        if (scale->scaleFactor <= 0) {
            reportError(@"Scale percentage must be positive.",
                       getTroubleshootingHint(@"scale format"));
            return NO;
        }
        return YES;
    }

    // Check for DPI (AAAdpi)
    if ([specStr hasSuffix:@"dpi"]) {
        NSString *numStr = [specStr substringToIndex:[specStr length] - 3];
        scale->dpi = [numStr doubleValue];
        scale->isDPI = YES;
        if (scale->dpi <= 0) {
            reportError(@"DPI value must be positive.",
                       getTroubleshootingHint(@"scale format"));
            return NO;
        }
        return YES;
    }

    // Check for dimensions (HHHxWWW, HHHx, xWWW)
    NSRange xRange = [specStr rangeOfString:@"x" options:NSCaseInsensitiveSearch]; // Case insensitive 'x'
    if (xRange.location != NSNotFound) {
        NSString *heightStr = @"";
        if (xRange.location > 0) {
            heightStr = [specStr substringToIndex:xRange.location];
        }
        NSString *widthStr = @"";
        if (xRange.location < [specStr length] - 1) {
            widthStr = [specStr substringFromIndex:xRange.location + 1];
        }

        if ([heightStr length] > 0) {
            scale->maxHeight = [heightStr doubleValue];
            if (scale->maxHeight <= 0) {
                fprintf(stderr, "Error: Height dimension must be positive.\n");
                return NO;
            }
            scale->hasHeight = YES;
        }

        if ([widthStr length] > 0) {
            scale->maxWidth = [widthStr doubleValue];
            if (scale->maxWidth <= 0) {
                fprintf(stderr, "Error: Width dimension must be positive.\n");
                return NO;
            }
            scale->hasWidth = YES;
        }

        return scale->hasHeight || scale->hasWidth;
    }

    // If no known suffix or 'x' separator, try to parse as a simple number (scale factor)
    // This makes "-s 2.0" work as scale factor 2.0
    NSScanner *scanner = [NSScanner scannerWithString:specStr];
    double factor;
    if ([scanner scanDouble:&factor] && [scanner isAtEnd]) {
        if (factor <= 0) {
            fprintf(stderr, "Error: Scale factor must be positive.\n");
            return NO;
        }
        scale->scaleFactor = factor;
        scale->isPercentage = NO; // Explicitly not a percentage
        scale->isDPI = NO;
        scale->hasWidth = NO;
        scale->hasHeight = NO;
        return YES;
    }

    fprintf(stderr, "Error: Invalid scale specification format: %s\n", spec);
    return NO;
}

NSData *readDataFromStdin(void) {
    NSMutableData *data = [NSMutableData data];
    char buffer[4096];
    size_t bytesRead;

    while ((bytesRead = fread(buffer, 1, sizeof(buffer), stdin)) > 0) {
        [data appendBytes:buffer length:bytesRead];
    }

    if (ferror(stdin)) {
        fprintf(stderr, "Error reading from stdin\n");
        return nil;
    }

    return data;
}

NSData *readPDFData(NSString *inputPath, BOOL verbose) {
    logMessage(verbose, @"Reading PDF data from: %@", inputPath ? inputPath : @"stdin");
    if (inputPath) {
        NSError *error = nil;
        NSData *data = [NSData dataWithContentsOfFile:inputPath options:0 error:&error];
        if (!data) {
            fprintf(stderr, "Error reading file %s: %s\n",
                    [inputPath UTF8String],
                    [[error localizedDescription] UTF8String]);
        }
        return data;
    } else {
        return readDataFromStdin();
    }
}

CGFloat calculateScaleFactor(ScaleSpec *scale, CGRect pageRect) {
    if (scale->isPercentage) {
        return scale->scaleFactor;
    }

    if (scale->isDPI) {
        // PDF points are 72 DPI by default
        return scale->dpi / 72.0;
    }

    // If only scaleFactor is set (e.g. from "-s 2.0")
    if (!scale->hasWidth && !scale->hasHeight && scale->scaleFactor > 0) {
        return scale->scaleFactor;
    }

    CGFloat scaleX = 1.0, scaleY = 1.0;

    if (scale->hasWidth && pageRect.size.width > 0) {
        scaleX = scale->maxWidth / pageRect.size.width;
    }

    if (scale->hasHeight && pageRect.size.height > 0) {
        scaleY = scale->maxHeight / pageRect.size.height;
    }

    if (scale->hasWidth && scale->hasHeight) { // HHHxWWW, fit to smallest
        return fmin(scaleX, scaleY);
    } else if (scale->hasWidth) { // xWWW
        return scaleX;
    } else if (scale->hasHeight) { // HHHx
        return scaleY;
    }

    return 1.0; // Default, should ideally be covered by isPercentage or direct scaleFactor
}

CGImageRef renderPDFPageToImage(CGPDFPageRef pdfPage, CGFloat scaleFactor, BOOL transparentBackground, BOOL verbose) {
    if (!pdfPage) return NULL;

    __block CGImageRef image = NULL;

    @autoreleasepool {
        logMessage(verbose, @"Rendering PDF page with scale factor: %.2f", scaleFactor);

        // Get page dimensions
        CGRect pageRect = CGPDFPageGetBoxRect(pdfPage, kCGPDFMediaBox);
        size_t width = (size_t)round(pageRect.size.width * scaleFactor);
        size_t height = (size_t)round(pageRect.size.height * scaleFactor);

        if (width == 0 || height == 0) {
            fprintf(stderr, "Error: Calculated image dimensions are zero (width: %zu, height: %zu). Check scale factor and PDF page size.\n", width, height);
            return NULL;
        }

        // Create bitmap context
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        CGContextRef context = CGBitmapContextCreate(NULL, width, height, 8, 0, colorSpace,
                                                    kCGImageAlphaPremultipliedLast); // Changed to PremultipliedLast for better transparency handling
        CGColorSpaceRelease(colorSpace);

        if (!context) {
            fprintf(stderr, "Failed to create bitmap context\n");
            return NULL;
        }

        // Set background
        if (!transparentBackground) {
            CGContextSetRGBFillColor(context, 1.0, 1.0, 1.0, 1.0); // White
            CGContextFillRect(context, CGRectMake(0, 0, width, height));
        } else {
            CGContextClearRect(context, CGRectMake(0, 0, width, height)); // Transparent
        }

        // Save context state
        CGContextSaveGState(context);

        // Scale and translate for PDF rendering
        CGContextScaleCTM(context, scaleFactor, scaleFactor);
        // CGContextTranslateCTM(context, -pageRect.origin.x, -pageRect.origin.y); // This might be needed if cropbox/mediabox origin is not 0,0

        // Draw PDF page
        CGContextDrawPDFPage(context, pdfPage);

        // Restore context state
        CGContextRestoreGState(context);

        // Create image from context
        image = CGBitmapContextCreateImage(context);
        CGContextRelease(context);

        logMessage(verbose, @"Page rendered to CGImageRef successfully.");
    }

    return image;
}

BOOL writeImageAsPNG(CGImageRef image, NSFileHandle *output, int pngQuality, BOOL verbose) {
    if (!image || !output) return NO;

    logMessage(verbose, @"Writing image as PNG to stdout with quality: %d", pngQuality);

    NSMutableData *imageData = [NSMutableData data];
    CGImageDestinationRef destination = CGImageDestinationCreateWithData((__bridge CFMutableDataRef)imageData,
                                                                        kUTTypePNG, 1, NULL);
    if (!destination) {
        fprintf(stderr, "Failed to create image destination for stdout\n");
        return NO;
    }

    // PNG Quality/Compression
    // ImageIO uses a float from 0.0 (max compression) to 1.0 (lossless)
    // We need to map our 0-9 to this. Let's say 0 is max compression (0.0), 9 is min compression (0.9 for example)
    // Or, more simply, use kCGImageCompressionQuality which is what the quality parameter implies
    // For PNG, it's typically lossless, but some libraries might offer control over filter strategies or zlib level.
    // For now, let's assume higher 'pngQuality' means less compression effort (faster) if applicable,
    // or map to kCGImageDestinationLossyCompressionQuality if we were doing lossy.
    // Since PNG is lossless, this 'quality' might map to compression effort/speed.
    // The default is usually a good balance. Let's make it explicit if quality is not default (6).
    NSDictionary *props = nil;
    if (pngQuality >= 0 && pngQuality <= 9) { // Assuming 0-9, map to 0.0-1.0 for kCGImageDestinationLossyCompressionQuality if it were lossy
                                          // For PNG, this specific key might not do much, but let's keep it for future.
                                          // A value closer to 1.0 means less compression.
        // float compressionValue = (float)pngQuality / 9.0f;
        // props = @{(__bridge NSString *)kCGImageDestinationLossyCompressionQuality: @(compressionValue)};
        // For PNG, there isn't a direct "quality" setting like JPEG.
        // It's lossless. We can control things like interlace, filters, or zlib compression level,
        // but CGImageDestination doesn't expose these directly for PNGs.
        // So, pngQuality might be ignored here or we can log a message.
        logMessage(verbose, @"PNG quality setting (%d) is noted, but CoreGraphics offers limited control for PNG compression levels.", pngQuality);
    }


    CGImageDestinationAddImage(destination, image, (__bridge CFDictionaryRef)props);

    if (!CGImageDestinationFinalize(destination)) {
        fprintf(stderr, "Failed to finalize image for stdout\n");
        CFRelease(destination);
        return NO;
    }
    CFRelease(destination);

    @try {
        [output writeData:imageData];
    } @catch (NSException *exception) {
        fprintf(stderr, "Error writing PNG data to stdout: %s\n", [[exception reason] UTF8String]);
        return NO;
    }

    logMessage(verbose, @"Image written to stdout successfully.");
    return YES;
}

BOOL writeImageToFile(CGImageRef image, NSString *outputPath, int pngQuality, BOOL verbose, BOOL dryRun, BOOL forceOverwrite) {
    if (!image || !outputPath) return NO;

    if (dryRun) {
        // In dry-run mode, just report what would be created
        BOOL exists = fileExists(outputPath);
        fprintf(stdout, "[DRY-RUN] Would create: %s%s\n", [outputPath UTF8String],
                exists ? " (overwrites existing)" : "");

        // Calculate approximate file size for the image
        size_t width = CGImageGetWidth(image);
        size_t height = CGImageGetHeight(image);
        size_t bitsPerPixel = CGImageGetBitsPerPixel(image);
        size_t estimatedSize = (width * height * bitsPerPixel) / 8 / 1024; // KB

        fprintf(stdout, "          Dimensions: %zux%zu, Estimated size: ~%zu KB\n", width, height, estimatedSize);
        return YES;
    }

    // Check for overwrite protection
    if (!forceOverwrite && !shouldOverwriteFile(outputPath, YES)) {
        logMessage(verbose, @"Skipping %@ - file exists and overwrite denied", outputPath);
        return NO;
    }

    logMessage(verbose, @"Writing image as PNG to file: %@ with quality: %d", outputPath, pngQuality);

    NSURL *url = [NSURL fileURLWithPath:outputPath];
    CGImageDestinationRef destination = CGImageDestinationCreateWithURL((__bridge CFURLRef)url,
                                                                       kUTTypePNG, 1, NULL);
    if (!destination) {
        fprintf(stderr, "Failed to create image destination for file: %s\n", [outputPath UTF8String]);
        return NO;
    }

    NSDictionary *props = nil;
     if (pngQuality >= 0 && pngQuality <= 9) {
        logMessage(verbose, @"PNG quality setting (%d) is noted, but CoreGraphics offers limited control for PNG compression levels.", pngQuality);
    }

    CGImageDestinationAddImage(destination, image, (__bridge CFDictionaryRef)props);

    BOOL success = CGImageDestinationFinalize(destination);
    if (!success) {
        fprintf(stderr, "Failed to write image to file: %s\n", [outputPath UTF8String]);
    }

    CFRelease(destination);
    logMessage(verbose, @"Image written to file %@ %s.", outputPath, success ? "successfully" : "failed");
    return success;
}

NSString *getOutputPrefix(Options *options) {
    if (options->outputPath && ![options->outputPath isEqualToString:@"-"]) { // Treat "-" as stdout for prefix
        // If output path is a full filename (e.g., "image.png"), use "image"
        // If it's just a prefix (e.g., "img_"), use it as is.
        // For batch mode, -o is always a prefix.
        return [[options->outputPath lastPathComponent] stringByDeletingPathExtension];
    } else if (options->inputPath) {
        // Use basename of input file
        NSString *basename = [[options->inputPath lastPathComponent] stringByDeletingPathExtension];
        return basename;
    } else {
        return @"page"; // Default prefix if input is stdin and no output path
    }
}

// PDF operator callbacks (forward declarations)
static void pdf_Tj(CGPDFScannerRef scanner, void *info);
static void pdf_TJ(CGPDFScannerRef scanner, void *info);
static void pdf_Quote(CGPDFScannerRef scanner, void *info);
static void pdf_DoubleQuote(CGPDFScannerRef scanner, void *info);

NSString *extractTextFromPDFPage(CGPDFPageRef page) {
    if (!page) return nil;

    NSMutableString *pageText = [NSMutableString string];

    // Create a PDF Scanner
    CGPDFScannerRef scanner = NULL;
    CGPDFContentStreamRef contentStream = CGPDFContentStreamCreateWithPage(page);
    if (contentStream) {
        CGPDFOperatorTableRef operatorTable = CGPDFOperatorTableCreate();

        // Set up operator callbacks for text extraction
        CGPDFOperatorTableSetCallback(operatorTable, "Tj", &pdf_Tj);
        CGPDFOperatorTableSetCallback(operatorTable, "TJ", &pdf_TJ);
        CGPDFOperatorTableSetCallback(operatorTable, "'", &pdf_Quote);
        CGPDFOperatorTableSetCallback(operatorTable, "\"", &pdf_DoubleQuote);

        scanner = CGPDFScannerCreate(contentStream, operatorTable, (__bridge void *)pageText);
        if (scanner) {
            CGPDFScannerScan(scanner);
            CGPDFScannerRelease(scanner);
        }

        CGPDFOperatorTableRelease(operatorTable);
        CGPDFContentStreamRelease(contentStream);
    }

    // Clean up the text
    NSString *cleanedText = [pageText stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
    cleanedText = [cleanedText stringByReplacingOccurrencesOfString:@"\\s+" withString:@" "
                                                           options:NSRegularExpressionSearch
                                                             range:NSMakeRange(0, cleanedText.length)];

    return cleanedText.length > 0 ? cleanedText : nil;
}

// PDF operator callbacks
static void pdf_Tj(CGPDFScannerRef scanner, void *info) {
    CGPDFStringRef pdfString = NULL;
    if (CGPDFScannerPopString(scanner, &pdfString)) {
        NSString *string = (__bridge_transfer NSString *)CGPDFStringCopyTextString(pdfString);
        if (string) {
            NSMutableString *pageText = (__bridge NSMutableString *)info;
            [pageText appendString:string];
            [pageText appendString:@" "];
        }
    }
}

static void pdf_TJ(CGPDFScannerRef scanner, void *info) {
    CGPDFArrayRef array = NULL;
    if (CGPDFScannerPopArray(scanner, &array)) {
        size_t count = CGPDFArrayGetCount(array);
        NSMutableString *pageText = (__bridge NSMutableString *)info;

        for (size_t i = 0; i < count; i++) {
            CGPDFObjectRef object = NULL;
            if (CGPDFArrayGetObject(array, i, &object)) {
                CGPDFObjectType type = CGPDFObjectGetType(object);
                if (type == kCGPDFObjectTypeString) {
                    CGPDFStringRef pdfString = NULL;
                    if (CGPDFObjectGetValue(object, kCGPDFObjectTypeString, &pdfString)) {
                        NSString *string = (__bridge_transfer NSString *)CGPDFStringCopyTextString(pdfString);
                        if (string) {
                            [pageText appendString:string];
                        }
                    }
                }
            }
        }
        [pageText appendString:@" "];
    }
}

static void pdf_Quote(CGPDFScannerRef scanner, void *info) {
    pdf_Tj(scanner, info);
}

static void pdf_DoubleQuote(CGPDFScannerRef scanner, void *info) {
    // Skip the two numeric parameters
    CGPDFReal tc, tw;
    CGPDFScannerPopNumber(scanner, &tc);
    CGPDFScannerPopNumber(scanner, &tw);
    pdf_Tj(scanner, info);
}

NSString *performOCROnImage(CGImageRef image) {
    if (!image) return nil;

    __block NSString *recognizedText = nil;
    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);

    @autoreleasepool {
        // Create Vision request
        VNRecognizeTextRequest *request = [[VNRecognizeTextRequest alloc] initWithCompletionHandler:^(VNRequest *request, NSError *error) {
            if (error) {
                NSLog(@"OCR Error: %@", error.localizedDescription);
                dispatch_semaphore_signal(semaphore);
                return;
            }

            NSMutableString *fullText = [NSMutableString string];
            for (VNRecognizedTextObservation *observation in request.results) {
                VNRecognizedText *topCandidate = [observation topCandidates:1].firstObject;
                if (topCandidate) {
                    [fullText appendString:topCandidate.string];
                    [fullText appendString:@" "];
                }
            }

            recognizedText = [fullText stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
            dispatch_semaphore_signal(semaphore);
        }];

        request.recognitionLevel = VNRequestTextRecognitionLevelAccurate;
        request.recognitionLanguages = @[@"en-US"]; // Add more languages as needed
        request.usesLanguageCorrection = YES;

        // Create handler and perform request
        VNImageRequestHandler *handler = [[VNImageRequestHandler alloc] initWithCGImage:image options:@{}];
        NSError *error = nil;
        [handler performRequests:@[request] error:&error];

        if (error) {
            NSLog(@"Failed to perform OCR: %@", error.localizedDescription);
            dispatch_semaphore_signal(semaphore);
        }
    }

    // Wait for OCR to complete (with timeout)
    dispatch_semaphore_wait(semaphore, dispatch_time(DISPATCH_TIME_NOW, 5 * NSEC_PER_SEC));

    return recognizedText;
}

NSString *slugifyText(NSString *text, NSUInteger maxLength) {
    if (!text || text.length == 0) return @"";

    // Convert to lowercase
    NSString *lowercased = [text lowercaseString];

    // Replace non-alphanumeric characters with hyphens
    NSMutableString *slugified = [NSMutableString string];
    NSCharacterSet *alphanumeric = [NSCharacterSet alphanumericCharacterSet];

    BOOL lastWasHyphen = NO;
    for (NSUInteger i = 0; i < lowercased.length && slugified.length < maxLength; i++) {
        unichar ch = [lowercased characterAtIndex:i];

        if ([alphanumeric characterIsMember:ch]) {
            [slugified appendFormat:@"%C", ch];
            lastWasHyphen = NO;
        } else if (!lastWasHyphen && slugified.length > 0) {
            [slugified appendString:@"-"];
            lastWasHyphen = YES;
        }
    }

    // Remove trailing hyphen if present
    if ([slugified hasSuffix:@"-"]) {
        [slugified deleteCharactersInRange:NSMakeRange(slugified.length - 1, 1)];
    }

    // Truncate to maxLength
    if (slugified.length > maxLength) {
        NSString *truncated = [slugified substringToIndex:maxLength];
        // Remove partial word at end
        NSRange lastHyphen = [truncated rangeOfString:@"-" options:NSBackwardsSearch];
        if (lastHyphen.location != NSNotFound && lastHyphen.location > maxLength * 0.7) {
            truncated = [truncated substringToIndex:lastHyphen.location];
        }
        return truncated;
    }

    return slugified;
}

NSArray<NSNumber *> *parsePageRange(NSString *rangeSpec, NSUInteger totalPages) {
    if (!rangeSpec || rangeSpec.length == 0) {
        return nil;
    }

    NSMutableSet *pageSet = [NSMutableSet set];
    NSArray *parts = [rangeSpec componentsSeparatedByString:@","];

    for (NSString *part in parts) {
        NSString *trimmedPart = [part stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];

        // Check if it's a range (contains hyphen)
        NSRange hyphenRange = [trimmedPart rangeOfString:@"-"];
        if (hyphenRange.location != NSNotFound) {
            // Split range into start and end
            NSArray *rangeParts = [trimmedPart componentsSeparatedByString:@"-"];
            if (rangeParts.count == 2) {
                NSInteger start = [rangeParts[0] integerValue];
                NSInteger end = [rangeParts[1] integerValue];

                // Validate range
                if (start < 1) start = 1;
                if (end > (NSInteger)totalPages) end = (NSInteger)totalPages;

                if (start <= end) {
                    for (NSInteger i = start; i <= end; i++) {
                        [pageSet addObject:@(i)];
                    }
                }
            }
        } else {
            // Single page number
            NSInteger pageNum = [trimmedPart integerValue];
            if (pageNum >= 1 && pageNum <= (NSInteger)totalPages) {
                [pageSet addObject:@(pageNum)];
            }
        }
    }

    // Convert set to sorted array
    NSArray *sortedPages = [[pageSet allObjects] sortedArrayUsingComparator:^NSComparisonResult(NSNumber *obj1, NSNumber *obj2) {
        return [obj1 compare:obj2];
    }];

    return sortedPages;
}

NSString *formatFilenameWithPattern(NSString *pattern, NSString *basename, NSUInteger pageNum,
                                   NSUInteger totalPages, NSString *extractedText) {
    if (!pattern || pattern.length == 0) {
        // Default pattern if none specified
        if (extractedText && extractedText.length > 0) {
            return [NSString stringWithFormat:@"%@-%03zu--%@", basename, pageNum, extractedText];
        } else {
            return [NSString stringWithFormat:@"%@-%03zu", basename, pageNum];
        }
    }

    NSMutableString *result = [NSMutableString stringWithString:pattern];

    // Replace {basename} or {name}
    [result replaceOccurrencesOfString:@"{basename}" withString:basename
                              options:0 range:NSMakeRange(0, result.length)];
    [result replaceOccurrencesOfString:@"{name}" withString:basename
                              options:0 range:NSMakeRange(0, result.length)];

    // Replace {page} with zero-padded page number
    NSUInteger digits = (NSUInteger)log10(totalPages > 0 ? totalPages : 1) + 1;
    if (digits < 3) digits = 3; // Minimum 3 digits
    NSString *pageStr = [NSString stringWithFormat:@"%0*zu", (int)digits, pageNum];
    [result replaceOccurrencesOfString:@"{page}" withString:pageStr
                              options:0 range:NSMakeRange(0, result.length)];

    // Replace {page:03d} style formatting
    NSRegularExpression *pageFormatRegex = [NSRegularExpression regularExpressionWithPattern:@"\\{page:0?(\\d+)d\\}"
                                                                                    options:0 error:nil];
    NSArray *matches = [pageFormatRegex matchesInString:result options:0
                                               range:NSMakeRange(0, result.length)];

    // Process matches in reverse order to avoid index shifting
    for (NSTextCheckingResult *match in [matches reverseObjectEnumerator]) {
        NSRange digitRange = [match rangeAtIndex:1];
        NSString *digitStr = [result substringWithRange:digitRange];
        int formatDigits = [digitStr intValue];
        NSString *formattedPage = [NSString stringWithFormat:@"%0*zu", formatDigits, pageNum];
        [result replaceCharactersInRange:match.range withString:formattedPage];
    }

    // Replace {text} with extracted text (if available)
    if (extractedText && extractedText.length > 0) {
        [result replaceOccurrencesOfString:@"{text}" withString:extractedText
                                  options:0 range:NSMakeRange(0, result.length)];
    } else {
        [result replaceOccurrencesOfString:@"{text}" withString:@""
                                  options:0 range:NSMakeRange(0, result.length)];
    }

    // Replace {date} with current date in YYYYMMDD format
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyyMMdd"];
    NSString *dateStr = [dateFormatter stringFromDate:[NSDate date]];
    [result replaceOccurrencesOfString:@"{date}" withString:dateStr
                              options:0 range:NSMakeRange(0, result.length)];

    // Replace {time} with current time in HHMMSS format
    [dateFormatter setDateFormat:@"HHmmss"];
    NSString *timeStr = [dateFormatter stringFromDate:[NSDate date]];
    [result replaceOccurrencesOfString:@"{time}" withString:timeStr
                              options:0 range:NSMakeRange(0, result.length)];

    // Replace {total} with total page count
    [result replaceOccurrencesOfString:@"{total}" withString:[NSString stringWithFormat:@"%zu", totalPages]
                              options:0 range:NSMakeRange(0, result.length)];

    return result;
}

// File overwrite protection functions
BOOL fileExists(NSString *path) {
    return [[NSFileManager defaultManager] fileExistsAtPath:path];
}

BOOL shouldOverwriteFile(NSString *path, BOOL interactive) {
    if (!fileExists(path)) {
        return YES; // File doesn't exist, safe to write
    }

    if (!interactive) {
        return NO; // Non-interactive mode, don't overwrite
    }

    return promptUserForOverwrite(path);
}

BOOL promptUserForOverwrite(NSString *path) {
    fprintf(stderr, "File '%s' already exists. Overwrite? (y/N): ", [path UTF8String]);
    fflush(stderr);

    char response[10];
    if (fgets(response, sizeof(response), stdin) == NULL) {
        return NO; // No input, default to no
    }

    // Check first character, case insensitive
    char first = response[0];
    return (first == 'y' || first == 'Y');
}

// Enhanced error reporting functions
void reportError(NSString *message, NSString *troubleshootingHint) {
    fprintf(stderr, "Error: %s\n", [message UTF8String]);
    if (troubleshootingHint) {
        fprintf(stderr, "Hint:  %s\n", [troubleshootingHint UTF8String]);
    }
}

void reportWarning(NSString *message, NSString *troubleshootingHint) {
    fprintf(stderr, "Warning: %s\n", [message UTF8String]);
    if (troubleshootingHint) {
        fprintf(stderr, "Hint:    %s\n", [troubleshootingHint UTF8String]);
    }
}

NSString *getTroubleshootingHint(NSString *errorContext) {
    if (!errorContext) return nil;

    NSString *context = [errorContext lowercaseString];

    // PDF-related errors
    if ([context containsString:@"pdf"] || [context containsString:@"document"]) {
        if ([context containsString:@"encrypted"] || [context containsString:@"password"]) {
            return @"PDF is password-protected. Try removing the password first using Preview or pdftk.";
        }
        if ([context containsString:@"corrupt"] || [context containsString:@"invalid"]) {
            return @"PDF file may be corrupted. Try opening it in Preview to verify it's readable.";
        }
        if ([context containsString:@"empty"] || [context containsString:@"no pages"]) {
            return @"PDF appears to be empty or has no pages to convert.";
        }
        return @"Verify the PDF file is valid and readable in Preview or other PDF viewers.";
    }

    // File I/O errors
    if ([context containsString:@"permission"] || [context containsString:@"denied"]) {
        return @"Check file permissions. You may need to use 'sudo' or change file ownership.";
    }
    if ([context containsString:@"not found"] || [context containsString:@"no such file"]) {
        return @"Verify the file path is correct and the file exists. Use absolute paths to avoid confusion.";
    }
    if ([context containsString:@"disk"] || [context containsString:@"space"]) {
        return @"Check available disk space. Large PDFs can require significant storage for conversion.";
    }

    // Memory errors
    if ([context containsString:@"memory"] || [context containsString:@"allocation"]) {
        return @"Try processing fewer pages at once or use a smaller scale factor to reduce memory usage.";
    }

    // Image/rendering errors
    if ([context containsString:@"image"] || [context containsString:@"render"]) {
        return @"Try using a smaller scale factor or lower DPI setting to reduce image complexity.";
    }

    // Scale/format errors
    if ([context containsString:@"scale"] || [context containsString:@"format"]) {
        return @"Use formats like '150%', '2.0', '800x600', or '300dpi'. See --help for examples.";
    }

    // Page range errors
    if ([context containsString:@"page"] || [context containsString:@"range"]) {
        return @"Use formats like '5' (single page), '1-10' (range), or '1,3,5-10' (list). Pages start at 1.";
    }

    return @"Run with -v/--verbose flag for more detailed information, or check --help for usage examples.";
}
</file>

<file path="README.md">
# pdf22png

[![Version](https://img.shields.io/github/v/release/twardoch/pdf22png?label=version)](https://github.com/twardoch/pdf22png/releases/latest)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)
[![Platform](https://img.shields.io/badge/platform-macOS-lightgrey.svg)](https://www.apple.com/macos/)

A high-performance command-line tool for converting PDF documents to PNG images on macOS, leveraging native Core Graphics and Quartz frameworks for optimal quality and speed.

## Features

- **Single & Batch Conversion**: Convert individual pages or entire PDF documents
- **Flexible Scaling Options**: 
  - Resolution control (DPI)
  - Percentage scaling
  - Fixed dimensions (width/height fitting)
  - Scale factors
- **Advanced Options**:
  - Page range selection (e.g., `1-5,10,15-20`)
  - Text extraction and OCR for smart naming
  - Dry-run mode for operation preview
  - File overwrite protection with prompts
  - Transparent background support
  - PNG compression quality control
  - Enhanced error messages with troubleshooting hints
  - Verbose logging for debugging
- **I/O Flexibility**:
  - Read from files or stdin
  - Write to files, stdout, or batch output directories
  - Customizable output naming patterns
- **Native Performance**: Built with Swift using macOS native frameworks
- **Universal Binary**: Supports both Intel and Apple Silicon Macs

## Installation

### Using Homebrew (Recommended)

```bash
brew tap twardoch/homebrew-pdf22png
brew install pdf22png
```

### Building from Source

Requirements:
- macOS 10.15 or later
- Xcode Command Line Tools

```bash
git clone https://github.com/twardoch/pdf22png.git
cd pdf22png
make
sudo make install
```

To build a universal binary for both Intel and Apple Silicon:

```bash
make universal
```

## Usage

### Basic Syntax

```bash
pdf22png [OPTIONS] <input.pdf> [output.png]
```

### Quick Examples

Convert first page of a PDF:
```bash
pdf22png input.pdf output.png
```

Convert a specific page:
```bash
pdf22png -p 5 document.pdf page5.png
```

Convert all pages to individual PNGs:
```bash
pdf22png -a document.pdf
# Creates: document-001.png, document-002.png, etc.
```

Convert at 300 DPI resolution:
```bash
pdf22png -r 300 input.pdf high-res.png
```

Scale to 50% size:
```bash
pdf22png -s 50% input.pdf half-size.png
```

### Options

| Option | Long Form | Description | Default |
|--------|-----------|-------------|---------|
| `-p <n>` | `--page` | Convert specific page number or range | 1 |
| `-a` | `--all` | Convert all pages | disabled |
| `-r <dpi>` | `--resolution` | Set output DPI (e.g., 300) | 144 |
| `-s <spec>` | `--scale` | Scale specification (see below) | 100% |
| `-t` | `--transparent` | Preserve transparency | disabled |
| `-q <0-9>` | `--quality` | PNG compression quality | 6 |
| `-o <path>` | `--output` | Output file/prefix or `-` for stdout | - |
| `-d <dir>` | `--directory` | Output directory for batch mode | . |
| `-n` | `--name` | Include extracted text in filenames | disabled |
| `-P <pattern>` | `--pattern` | Custom naming pattern for batch mode | - |
| `-D` | `--dry-run` | Preview operations without writing files | disabled |
| `-f` | `--force` | Force overwrite existing files without prompting | disabled |
| `-v` | `--verbose` | Enable verbose logging | disabled |
| `-h` | `--help` | Show help message | - |

### Scale Specifications

The `-s/--scale` option accepts various formats:

- **Percentage**: `150%` (1.5x scale)
- **Factor**: `2.0` (2x scale)
- **Fixed width**: `800x` (800px wide, height auto)
- **Fixed height**: `x600` (600px high, width auto)
- **Fit within**: `800x600` (fit within 800x600 box)

### Page Ranges

The `-p/--page` option supports flexible page selection:

- **Single page**: `-p 5`
- **Range**: `-p 5-10`
- **Multiple selections**: `-p 1,3,5-10,15`
- **Mix and match**: `-p 1-3,7,10-15`

### Custom Naming Patterns

Use `-P/--pattern` with placeholders for batch conversions:

- `{basename}` or `{name}` - Input filename without extension
- `{page}` - Page number with automatic padding
- `{page:03d}` - Page number with custom padding (e.g., 001, 002)
- `{text}` - Extracted text from page (requires -n flag)
- `{date}` - Current date in YYYYMMDD format
- `{time}` - Current time in HHMMSS format
- `{total}` - Total page count

Example: `pdf22png -P '{basename}_p{page:04d}_of_{total}' doc.pdf`
Creates: `doc_p0001_of_10.png`, `doc_p0002_of_10.png`, etc.

### Advanced Examples

Convert with transparent background at 300 DPI:
```bash
pdf22png -t -r 300 input.pdf transparent-300dpi.png
```

Batch convert all pages to a specific directory:
```bash
pdf22png -d ./output_images -o myprefix document.pdf
# Creates: ./output_images/myprefix-001.png, etc.
```

Convert specific page ranges:
```bash
pdf22png -p 1-3,5,10-15 document.pdf
# Converts pages 1, 2, 3, 5, 10, 11, 12, 13, 14, 15
```

Use custom naming pattern with extracted text:
```bash
pdf22png -a -n -P '{basename}-{page:03d}--{text}' document.pdf
# Creates: document-001--introduction.png, document-002--chapter-one.png, etc.
```

Preview operations with dry-run mode:
```bash
pdf22png -a -D -P 'page_{page}_of_{total}' document.pdf
# Shows what files would be created without actually writing them
```

Force overwrite existing files without prompting:
```bash
pdf22png -f -a document.pdf
# Overwrites existing files without asking
```

Pipe operations:
```bash
# From stdin to stdout
cat document.pdf | pdf22png - - > output.png

# Process and pipe to ImageMagick
pdf22png -r 300 input.pdf - | convert - -resize 50% final.jpg
```

## Architecture

pdf22png is built using:
- **Swift** using macOS native frameworks
- **Core Graphics** for PDF rendering
- **Vision** framework for OCR capabilities
- **ImageIO** for PNG output
- Native macOS APIs for optimal performance
- **Swift Argument Parser** for command-line interface

The codebase is organized into:
- `Package.swift` - Swift Package Manager manifest
- `Sources/pdf22png/main.swift` - Main program logic, argument parsing, and processing workflows
- `Sources/pdf22png/Models.swift` - Core data structures (e.g., `ProcessingOptions`, `ScaleSpecification`)
- `Sources/pdf22png/Utilities.swift` - Utility functions for scaling, rendering, I/O, text extraction, etc.
- `Tests/pdf22pngTests/` - XCTest-based unit tests written in Swift

## Performance

pdf22png is optimized for performance:
- Parallel processing for batch conversions using Swift Concurrency (TaskGroup)
- Efficient memory management with Swift ARC and value types where appropriate
- Native Core Graphics rendering for best quality
- Built-in error recovery for robust batch processing
- Context-aware text extraction with OCR fallback
- Minimal dependencies (only macOS system frameworks)

## Contributing

Contributions are welcome! Please feel free to submit issues, feature requests, or pull requests.

### Development

To build from source:
```bash
make
```

To run tests:
```bash
make test
```

### Releasing

To create a new release:
```bash
# Automatic versioning (increments minor version)
./release.sh

# Specify version explicitly
./release.sh --v 2.1.0
```

This will:
1. Build the universal binary
2. Run tests
3. Create and push a git tag
4. Trigger GitHub Actions to build and publish release artifacts

See [TODO.md](TODO.md) for planned features and improvements.

## License

pdf22png is released under the MIT License. See [LICENSE](LICENSE) for details.

## Author

- Created by [Adam Twardoch](https://github.com/twardoch)
- Developed using Anthropic software

## See Also

- [Usage Guide](docs/USAGE.md) - Detailed usage instructions
- [Examples](docs/EXAMPLES.md) - More usage examples
- [API Documentation](docs/API.md) - Function reference
- [Changelog](CHANGELOG.md) - Version history
</file>

</files>
